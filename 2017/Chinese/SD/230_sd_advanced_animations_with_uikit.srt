1
00:00:17,551 --> 00:00:19,987 line:10%
<c.magenta>（UIKit进阶动画）</c>


2
00:00:21,989 --> 00:00:22,823 line:90%,end
<c.magenta>大家好</c>


3
00:00:23,257 --> 00:00:25,526 line:90%,end
<c.magenta>我是Joe Cerra</c>
<c.magenta>UIKit团队的一名工程师</c>


4
00:00:26,260 --> 00:00:29,162 line:90%,end
<c.magenta>欢迎来到UIKit进阶动画演讲</c>


5
00:00:30,864 --> 00:00:32,598 line:90%,end
<c.magenta>今天我们要讲很多内容</c>


6
00:00:32,900 --> 00:00:35,202 line:90%,end
<c.magenta>一开始我们会涉及一些基础知识</c>


7
00:00:35,435 --> 00:00:36,703 line:90%,end
<c.magenta>以及动画运作的流程</c>


8
00:00:36,770 --> 00:00:38,705 line:90%,end
<c.magenta>还有动画定时的机理</c>


9
00:00:40,107 --> 00:00:42,042 line:90%,end
<c.magenta>我们会谈到如何运用一些新式的技巧</c>


10
00:00:42,109 --> 00:00:45,479 line:90%,end
<c.magenta>让动画具有</c>
<c.magenta>充分交互性和可中断性的方法</c>


11
00:00:46,813 --> 00:00:48,782 line:90%,end
<c.magenta>接着我们会讲到</c>


12
00:00:48,849 --> 00:00:50,851 line:90%,end
<c.magenta>今年在iOS 11里提供的</c>
<c.magenta>新应用程序接口</c>


13
00:00:51,952 --> 00:00:53,987 line:90%,end
<c.magenta>然后我们会将所有这些知识运用起来</c>


14
00:00:54,188 --> 00:00:56,723 line:90%,end
<c.magenta>我会给你们展示</c>
<c.magenta>如何对动画进行调节的方法</c>


15
00:00:57,925 --> 00:01:00,394 line:90%,end
<c.magenta>最后我们会看一些小窍门和小技巧</c>


16
00:01:00,494 --> 00:01:02,429 line:90%,end
<c.magenta>以及更多帮助你们</c>


17
00:01:02,496 --> 00:01:04,464 line:90%,end
<c.magenta>为用户打造精美动画的方法</c>


18
00:01:05,766 --> 00:01:06,800 line:90%,end
<c.magenta>那么我们就开始吧</c>


19
00:01:08,435 --> 00:01:09,670 line:90%,end
<c.magenta>基于UIView的动画</c>


20
00:01:09,736 --> 00:01:12,072 line:90%,end
<c.magenta>其实从iOS诞生以来就一直存在了</c>


21
00:01:12,306 --> 00:01:14,341 line:90%,end
<c.magenta>我们在这儿快速回顾一下</c>
<c.magenta>它们运作的流程</c>


22
00:01:15,442 --> 00:01:17,477 line:90%,end
<c.magenta>假设我有一个UIView</c>
<c.magenta>它显示一个圆圈</c>


23
00:01:17,611 --> 00:01:18,745 line:90%,end
<c.magenta>我想给它加一个动画</c>


24
00:01:19,046 --> 00:01:21,582 line:90%,end
<c.magenta>让它从X等于0的位置</c>
<c.magenta>移动到X等于100的位置</c>


25
00:01:22,649 --> 00:01:23,917 line:10%
<c.magenta>那么我可能就会</c>


26
00:01:23,984 --> 00:01:26,019 line:10%
<c.magenta>调用</c>
<c.magenta>UIView.animate方法</c>


27
00:01:26,553 --> 00:01:29,089 line:10%
<c.magenta>我调用UIView.animate</c>
<c.magenta>用到了时长</c>


28
00:01:29,556 --> 00:01:31,892 line:10%
<c.magenta>在动画模块中演示一些动画</c>


29
00:01:31,959 --> 00:01:35,562 line:10%
<c.magenta>在这个例子中</c>
<c.magenta>我让圆圈的X值偏移100个单位</c>


30
00:01:36,496 --> 00:01:39,700 line:10%
<c.magenta>我这么做了以后</c>
<c.magenta>UIKit会默认地创建动画</c>


31
00:01:39,766 --> 00:01:42,436 line:10%
<c.magenta>将它加入到我们的图层中</c>
<c.magenta>生成下面这个动画</c>


32
00:01:44,738 --> 00:01:47,941 line:90%,end
<c.magenta>不过 去年我们引进了</c>
<c.magenta>UIViewPropertyAnimator</c>


33
00:01:48,008 --> 00:01:49,676 line:90%,end
<c.magenta>它比起它的前身</c>
<c.magenta>UIViewAnimate</c>


34
00:01:49,743 --> 00:01:52,713 line:90%,end
<c.magenta>让我们可以对动画进行更多调控</c>


35
00:01:54,081 --> 00:01:57,317 line:90%,end
<c.magenta>这包括能够提供自定义的定时函数</c>


36
00:01:57,384 --> 00:01:59,720 line:90%,end
<c.magenta>还有能够便捷地让你们的动画</c>
<c.magenta>具有充分交互性</c>


37
00:01:59,786 --> 00:02:01,722 line:90%,end
<c.magenta>和可中断性</c>


38
00:02:02,456 --> 00:02:04,191 line:90%,end
<c.magenta>实际上 通过属性动画生成器</c>


39
00:02:04,525 --> 00:02:06,727 line:90%,end
<c.magenta>你们可以随意地修改动画</c>


40
00:02:07,895 --> 00:02:09,162 line:90%,end
<c.magenta>我们再来看看我们的动画</c>


41
00:02:09,229 --> 00:02:11,598 line:90%,end
<c.magenta>这次我们要用动画生成器来生成动画</c>


42
00:02:12,366 --> 00:02:13,500 line:90%,end
<c.magenta>我们创建动画生成器</c>


43
00:02:13,567 --> 00:02:15,469 line:10%
<c.magenta>提供时长和定时曲线</c>


44
00:02:15,936 --> 00:02:17,037 line:10%
<c.magenta>提供动画</c>


45
00:02:17,538 --> 00:02:19,072 line:10%
<c.magenta>然后我们调用</c>
<c.magenta>startAnimation</c>


46
00:02:19,173 --> 00:02:21,408 line:10%
<c.magenta>它就会运行</c>


47
00:02:21,508 --> 00:02:22,976 line:10%
<c.magenta>生成这个动画的动画模块</c>


48
00:02:26,580 --> 00:02:28,148 line:10%
<c.magenta>在之前的两个例子中</c>


49
00:02:28,215 --> 00:02:31,151 line:10%
<c.magenta>我们用线性定时曲线驱动我们的动画</c>


50
00:02:31,718 --> 00:02:33,086 line:10%
<c.magenta>而定时曲线</c>


51
00:02:33,187 --> 00:02:36,323 line:10%
<c.magenta>本质上就是一个</c>
<c.magenta>将时间映射到进度上的函数</c>


52
00:02:36,523 --> 00:02:39,626 line:10%
<c.magenta>或者就是动画已用时间与</c>


53
00:02:39,693 --> 00:02:42,062 line:10%
<c.magenta>动画已有进度的比例</c>


54
00:02:43,130 --> 00:02:45,832 line:10%
<c.magenta>线性定时曲线</c>


55
00:02:46,033 --> 00:02:47,067 line:10%
<c.magenta>其实很有意思</c>


56
00:02:47,134 --> 00:02:49,937 line:10%
<c.magenta>因为已用时间占所有时间的比例</c>
<c.magenta>等于已有进度占所有进度的比例</c>


57
00:02:50,237 --> 00:02:52,673 line:10%
<c.magenta>我们一会儿就会明白</c>
<c.magenta>这个特性很有意思的地方</c>


58
00:02:54,274 --> 00:02:55,576 line:10%
<c.magenta>当然还有</c>


59
00:02:55,709 --> 00:02:57,344 line:10%
<c.magenta>非线性的定时曲线</c>


60
00:02:57,544 --> 00:03:00,013 line:10%
<c.magenta>比如内置的缓入定时函数</c>


61
00:03:00,080 --> 00:03:02,316 line:10%
<c.magenta>它一开始很慢 然后渐渐加速</c>


62
00:03:02,749 --> 00:03:04,718 line:10%
<c.magenta>还有内置的缓出定时函数</c>


63
00:03:04,785 --> 00:03:06,920 line:10%
<c.magenta>它一开始很快 然后渐渐减速</c>


64
00:03:07,654 --> 00:03:09,122 line:10%
<c.magenta>那么通过运用属性动画生成器</c>


65
00:03:09,223 --> 00:03:11,225 line:10%
<c.magenta>你们可以提供自定义的定时函数</c>


66
00:03:11,291 --> 00:03:12,192 line:10%
<c.magenta>比如这个</c>


67
00:03:12,759 --> 00:03:13,861 line:10%
<c.magenta>你要做的是</c>


68
00:03:13,961 --> 00:03:16,697 line:10%
<c.magenta>提供两个贝塞尔曲线控制点</c>


69
00:03:17,664 --> 00:03:19,166 line:90%,end
<c.magenta>我们稍后会看到</c>


70
00:03:19,466 --> 00:03:21,502 line:90%,end
<c.magenta>它对于提供自定义定时函数</c>


71
00:03:21,568 --> 00:03:24,137 line:90%,end
<c.magenta>真正有用的地方</c>


72
00:03:25,772 --> 00:03:28,275 line:90%,end
<c.magenta>以上所讲的就是动画运作的流程</c>


73
00:03:29,109 --> 00:03:29,977 line:90%,end
<c.magenta>现在我想讲的是</c>


74
00:03:30,043 --> 00:03:32,379 line:90%,end
<c.magenta>如何让动画具有充分交互性的方法</c>


75
00:03:33,714 --> 00:03:36,884 line:90%,end
<c.magenta>在交互性的动画中 用户的操作</c>


76
00:03:36,950 --> 00:03:39,987 line:90%,end
<c.magenta>互动性地推进动画的进程</c>


77
00:03:40,654 --> 00:03:41,688 line:90%,end
<c.magenta>这里有一个你们熟悉的例子</c>


78
00:03:41,755 --> 00:03:44,191 line:90%,end
<c.magenta>用手势驱动互动性的动画</c>


79
00:03:44,258 --> 00:03:45,893 line:90%,end
<c.magenta>现在我们用3D Touch</c>


80
00:03:46,093 --> 00:03:47,728 line:90%,end
<c.magenta>来操控另外一个动画</c>


81
00:03:49,196 --> 00:03:50,230 line:90%,end
<c.magenta>当然 我们可以</c>


82
00:03:50,364 --> 00:03:53,500 line:90%,end
<c.magenta>用手势来互动性地关闭</c>
<c.magenta>Control Center界面</c>


83
00:03:54,635 --> 00:03:56,703 line:90%,end
<c.magenta>我们来做一个快速展示</c>


84
00:03:57,271 --> 00:04:00,240 line:90%,end
<c.magenta>我们要给圆圈加一个</c>
<c.magenta>PanGestureRecognizer</c>


85
00:04:01,375 --> 00:04:02,876 line:90%,end
<c.magenta>我们要生成动画</c>


86
00:04:03,076 --> 00:04:04,578 line:90%,end
<c.magenta>但我们要用手指</c>


87
00:04:04,645 --> 00:04:05,913 line:90%,end
<c.magenta>对动画生成器进行摩擦操作</c>


88
00:04:06,146 --> 00:04:08,182 line:90%,end
<c.magenta>在这里我们要拿起手指</c>


89
00:04:08,248 --> 00:04:10,784 line:90%,end
<c.magenta>然后让动画继续进行到它的目标位置</c>


90
00:04:12,386 --> 00:04:13,854 line:90%,end
<c.magenta>以下是实现该效果的代码</c>


91
00:04:14,454 --> 00:04:18,591 line:90%,end
<c.magenta>我们把属性动画生成器的一个实例</c>


92
00:04:18,692 --> 00:04:20,861 line:90%,end
<c.magenta>储存在手势识别处理器中</c>


93
00:04:21,128 --> 00:04:22,896 line:90%,end
<c.magenta>我们就来创建这个动画生成器</c>


94
00:04:22,963 --> 00:04:26,433 line:90%,end
<c.magenta>用遵循缓出定时函数的动画</c>
<c.magenta>对它进行初始化</c>


95
00:04:30,103 --> 00:04:33,073 line:90%,end
<c.magenta>之后我们立即调用</c>
<c.magenta>pauseAnimation</c>


96
00:04:33,140 --> 00:04:34,908 line:90%,end
<c.magenta>它就会运行这个动画模块</c>


97
00:04:34,975 --> 00:04:36,944 line:90%,end
<c.magenta>默认地生成这个动画</c>


98
00:04:37,578 --> 00:04:39,012 line:90%,end
<c.magenta>属性动画生成器的作用</c>


99
00:04:39,079 --> 00:04:42,716 line:90%,end
<c.magenta>就是将动画的速度设为零</c>


100
00:04:43,350 --> 00:04:44,885 line:90%,end
<c.magenta>这样我们就可以和它进行互动</c>


101
00:04:45,185 --> 00:04:47,621 line:90%,end
<c.magenta>我们来对动画生成器完成的部分</c>
<c.magenta>进行摩擦操作</c>


102
00:04:47,688 --> 00:04:49,489 line:90%,end
<c.magenta>这个部分是指我们手指移动的距离</c>


103
00:04:49,556 --> 00:04:52,059 line:90%,end
<c.magenta>相对于动画总距离的百分比</c>


104
00:04:52,159 --> 00:04:53,627 line:90%,end
<c.magenta>在这个例子中就是100</c>


105
00:04:53,727 --> 00:04:55,729 line:90%,end
<c.magenta>因为我们生成的动画是从0到100的</c>


106
00:04:57,664 --> 00:04:58,899 line:90%,end
<c.magenta>而当我们拿起手指时</c>


107
00:04:58,966 --> 00:05:01,034 line:90%,end
<c.magenta>我们就调用</c>
<c.magenta>continueAnimation</c>


108
00:05:02,536 --> 00:05:03,704 line:90%,end
<c.magenta>这的确很简单</c>


109
00:05:03,937 --> 00:05:06,139 line:90%,end
<c.magenta>但在整个过程中</c>


110
00:05:06,206 --> 00:05:07,107 line:90%,end
<c.magenta>有两个很有意思的时刻</c>


111
00:05:07,241 --> 00:05:09,843 line:90%,end
<c.magenta>一个是我们暂停动画时</c>
<c.magenta>另一个是我们继续运行动画时</c>


112
00:05:09,910 --> 00:05:11,211 line:90%,end
<c.magenta>我们来仔细看一下</c>


113
00:05:12,346 --> 00:05:13,914 line:90%,end
<c.magenta>我们刚创建了动画生成器</c>


114
00:05:14,081 --> 00:05:16,583 line:90%,end
<c.magenta>假设我们准备暂停动画</c>
<c.magenta>以便我们可以与其互动</c>


115
00:05:16,650 --> 00:05:21,154 line:90%,end
<c.magenta>值得注意的是 我们的动画生成器</c>
<c.magenta>在创建时使用的是缓出定时函数</c>


116
00:05:21,355 --> 00:05:23,257 line:90%,end
<c.magenta>我们来调用暂停函数</c>
<c.magenta>看看会发生什么</c>


117
00:05:26,226 --> 00:05:27,828 line:90%,end
<c.magenta>我们的动画生成器进入待命状态</c>


118
00:05:28,028 --> 00:05:32,499 line:90%,end
<c.magenta>但我们刚已经将定时曲线</c>
<c.magenta>自动转成了线性的定时曲线</c>


119
00:05:32,799 --> 00:05:34,535 line:90%,end
<c.magenta>为何属性动画生成器会这么做呢？</c>


120
00:05:35,235 --> 00:05:38,672 line:90%,end
<c.magenta>因为这会方便我们对动画进行摩擦操作</c>


121
00:05:38,906 --> 00:05:41,041 line:90%,end
<c.magenta>而这又源于线性定时函数的性质</c>


122
00:05:41,108 --> 00:05:44,211 line:90%,end
<c.magenta>即已用时间占所有时间的比例</c>
<c.magenta>等于已有进度占所有进度的比例</c>


123
00:05:44,278 --> 00:05:47,114 line:90%,end
<c.magenta>你们现在就可以对时间和进度</c>
<c.magenta>进行均匀的摩擦操作了</c>


124
00:05:48,916 --> 00:05:51,718 line:90%,end
<c.magenta>我们再来看看当我们继续演示动画时</c>
<c.magenta>会发生些什么</c>


125
00:05:52,686 --> 00:05:54,388 line:90%,end
<c.magenta>这里 我们对动画进行摩擦操作</c>


126
00:05:54,922 --> 00:05:56,089 line:90%,end
<c.magenta>现在我们把手指抬起来</c>


127
00:05:56,156 --> 00:05:58,025 line:90%,end
<c.magenta>我们准备调用</c>
<c.magenta>continueAnimation</c>


128
00:05:58,192 --> 00:05:59,860 line:90%,end
<c.magenta>我们来看看这会有什么效果</c>


129
00:06:02,996 --> 00:06:05,632 line:90%,end
<c.magenta>我们又转换到了之前的缓出定时函数</c>


130
00:06:06,300 --> 00:06:07,734 line:90%,end
<c.magenta>但同时 有趣的事情发生了</c>


131
00:06:07,801 --> 00:06:09,903 line:90%,end
<c.magenta>在这个过程中</c>
<c.magenta>我们对时间进行了重新映射</c>


132
00:06:10,037 --> 00:06:14,041 line:90%,end
<c.magenta>完成的部分之前是50%</c>
<c.magenta>现在变成了10%</c>


133
00:06:14,474 --> 00:06:18,378 line:90%,end
<c.magenta>这么做的原因是</c>
<c.magenta>当我们转换回之前的定时函数时</c>


134
00:06:18,445 --> 00:06:20,948 line:90%,end
<c.magenta>我们想保持稳定的进度值</c>


135
00:06:22,816 --> 00:06:25,152 line:90%,end
<c.magenta>并且我想让你们留意这里的时长系数</c>


136
00:06:25,219 --> 00:06:26,153 line:90%,end
<c.magenta>它的值为零</c>


137
00:06:26,320 --> 00:06:28,155 line:90%,end
<c.magenta>这意味着要让我们的属性动画生成器</c>


138
00:06:28,222 --> 00:06:30,524 line:90%,end
<c.magenta>用完剩下的时间 无论有多少</c>


139
00:06:30,757 --> 00:06:34,394 line:90%,end
<c.magenta>而在这个例子中就是原本时长的90%</c>


140
00:06:34,695 --> 00:06:38,732 line:90%,end
<c.magenta>所以假设我们的动画生成器创建时</c>
<c.magenta>时长的赋值是两秒</c>


141
00:06:38,932 --> 00:06:41,001 line:90%,end
<c.magenta>动画就会继续运行1.8秒</c>


142
00:06:42,636 --> 00:06:45,005 line:90%,end
<c.magenta>以上就是交互性动画运作的原理</c>


143
00:06:45,072 --> 00:06:48,141 line:90%,end
<c.magenta>我们现在来谈如何让动画</c>
<c.magenta>具有充分的可中断性的方法</c>


144
00:06:50,010 --> 00:06:52,546 line:90%,end
<c.magenta>在一个具有可中断性的动画中</c>
<c.magenta>用户的操作</c>


145
00:06:52,613 --> 00:06:55,082 line:90%,end
<c.magenta>可以中断或者暂停一个正在运行的动画</c>


146
00:06:55,482 --> 00:06:57,851 line:90%,end
<c.magenta>以下是一个</c>
<c.magenta>你们可能熟悉的Safari的例子</c>


147
00:06:57,918 --> 00:06:59,052 line:90%,end
<c.magenta>当你们用手指快速拨动时</c>


148
00:06:59,119 --> 00:07:01,822 line:90%,end
<c.magenta>动画会加速 然后它又会有所减速</c>


149
00:07:02,189 --> 00:07:04,925 line:90%,end
<c.magenta>但如果你们再次触碰屏幕</c>
<c.magenta>动画就会被中断</c>


150
00:07:05,192 --> 00:07:06,660 line:90%,end
<c.magenta>这时你们就可以摩擦操作了</c>


151
00:07:08,795 --> 00:07:10,931 line:90%,end
<c.magenta>这次 我们要多做一项演示</c>


152
00:07:11,198 --> 00:07:13,166 line:10%
<c.magenta>我们要给圆圈加入</c>


153
00:07:13,233 --> 00:07:14,168 line:10%
<c.magenta>PanGestureRecognizer</c>


154
00:07:14,434 --> 00:07:16,303 line:10%
<c.magenta>但这次 我们要让动画运行一段时间</c>


155
00:07:16,370 --> 00:07:18,238 line:10%
<c.magenta>然后我们再中途截断它</c>


156
00:07:19,239 --> 00:07:20,607 line:90%,end
<c.magenta>在这里 动画正在运行</c>


157
00:07:20,741 --> 00:07:22,276 line:90%,end
<c.magenta>我们接着用手指截断它</c>


158
00:07:22,409 --> 00:07:23,744 line:90%,end
<c.magenta>这时我们就可以摩擦操作了</c>


159
00:07:23,810 --> 00:07:25,345 line:90%,end
<c.magenta>但我们已看过这个运作的流程</c>


160
00:07:25,445 --> 00:07:26,847 line:90%,end
<c.magenta>所以取而代之我们提起手指</c>


161
00:07:26,914 --> 00:07:29,383 line:90%,end
<c.magenta>让动画继续运行到它的目标位置</c>


162
00:07:33,520 --> 00:07:34,621 line:90%,end
<c.magenta>这里展示的是之前的代码</c>


163
00:07:34,688 --> 00:07:36,290 line:90%,end
<c.magenta>我们只需进行一些小的改动</c>


164
00:07:36,356 --> 00:07:39,660 line:90%,end
<c.magenta>来支持既有互动性又有可中断性的动画</c>


165
00:07:40,694 --> 00:07:41,862 line:90%,end
<c.magenta>我们在此引进一个新方法</c>


166
00:07:41,929 --> 00:07:43,864 line:90%,end
<c.magenta>叫作animateTransitionIfNeeded</c>


167
00:07:43,931 --> 00:07:45,299 line:90%,end
<c.magenta>这是一个自定义的方法</c>


168
00:07:46,366 --> 00:07:48,235 line:90%,end
<c.magenta>比如这并不是UIKit的方法</c>


169
00:07:49,036 --> 00:07:49,970 line:90%,end
<c.magenta>这个方法会</c>


170
00:07:50,037 --> 00:07:51,305 line:90%,end
<c.magenta>启动转变过程</c>


171
00:07:51,371 --> 00:07:52,840 line:90%,end
<c.magenta>如果转变还没开始进行的话</c>


172
00:07:53,440 --> 00:07:55,075 line:90%,end
<c.magenta>我们还要引进一个新的属性</c>


173
00:07:55,142 --> 00:07:56,877 line:90%,end
<c.magenta>叫作progressWhenInterrupted</c>


174
00:07:57,010 --> 00:07:58,712 line:90%,end
<c.magenta>它会在动画被中断之前储存</c>


175
00:07:58,779 --> 00:08:01,181 line:90%,end
<c.magenta>你的动画生成器达成的任何相对的进度</c>


176
00:08:02,416 --> 00:08:03,483 line:90%,end
<c.magenta>当我们开始输入手势时</c>


177
00:08:03,550 --> 00:08:04,918 line:90%,end
<c.magenta>我们就要重新创建属性动画生成器</c>


178
00:08:04,985 --> 00:08:07,454 line:90%,end
<c.magenta>但这次我们只在转变没有开启的时候</c>
<c.magenta>进行重建</c>


179
00:08:07,788 --> 00:08:10,023 line:90%,end
<c.magenta>然后我们暂停动画</c>
<c.magenta>以便我们可以与之互动</c>


180
00:08:10,190 --> 00:08:11,658 line:90%,end
<c.magenta>我们会在动画中断前储存</c>


181
00:08:11,725 --> 00:08:13,660 line:90%,end
<c.magenta>动画达成的任何相对进度</c>


182
00:08:15,329 --> 00:08:16,163 line:90%,end
<c.magenta>当我们的手指移动时</c>


183
00:08:16,230 --> 00:08:18,365 line:90%,end
<c.magenta>我们会对动画生成器完成的部分</c>
<c.magenta>进行摩擦操作</c>


184
00:08:18,432 --> 00:08:19,266 line:90%,end
<c.magenta>但这次</c>


185
00:08:19,466 --> 00:08:20,734 line:90%,end
<c.magenta>我们要在动画被中断前</c>


186
00:08:20,801 --> 00:08:22,569 line:90%,end
<c.magenta>基于我们手指</c>


187
00:08:22,636 --> 00:08:24,771 line:90%,end
<c.magenta>相对于动画进度所移动的距离</c>


188
00:08:24,838 --> 00:08:26,173 line:90%,end
<c.magenta>对动画生成器进行摩擦操作</c>


189
00:08:27,641 --> 00:08:29,977 line:10%
<c.magenta>而当我们拿起手指时</c>
<c.magenta>我们要继续运行动画</c>


190
00:08:30,944 --> 00:08:31,812 line:90%,end
<c.magenta>但为了让这个例子</c>


191
00:08:31,879 --> 00:08:32,980 line:90%,end
<c.magenta>变得稍微更有意思</c>


192
00:08:33,413 --> 00:08:35,448 line:90%,end
<c.magenta>我们用缓出定时函数来继续演示动画</c>


193
00:08:35,515 --> 00:08:37,183 line:90%,end
<c.magenta>我们假设动画创建时</c>


194
00:08:37,251 --> 00:08:40,187 line:90%,end
<c.magenta>用的是缓出定时函数</c>
<c.magenta>目的就是为了看看这么做的效果</c>


195
00:08:43,390 --> 00:08:45,526 line:90%,end
<c.magenta>在这里 我们即将中断动画</c>


196
00:08:45,592 --> 00:08:47,160 line:90%,end
<c.magenta>完成的部分大约是50%</c>


197
00:08:47,227 --> 00:08:49,363 line:90%,end
<c.magenta>所以动画运行了大约一半的时长</c>


198
00:08:49,496 --> 00:08:51,031 line:10%
<c.magenta>而进度只有10%左右</c>


199
00:08:51,098 --> 00:08:53,000 line:10%
<c.magenta>因为我们遵循的是缓出定时函数</c>


200
00:08:53,100 --> 00:08:54,835 line:10%
<c.magenta>我们来调用暂停函数看看会发生什么</c>


201
00:08:56,270 --> 00:08:57,371 line:10%
<c.magenta>和之前一样 我们转换到</c>


202
00:08:57,437 --> 00:08:58,438 line:10%
<c.magenta>线性定时函数</c>


203
00:08:58,505 --> 00:08:59,973 line:10%
<c.magenta>以便进行摩擦操作</c>


204
00:09:00,174 --> 00:09:01,975 line:10%
<c.magenta>但我们同时又对时间进行了重新映射</c>


205
00:09:02,042 --> 00:09:03,844 line:10%
<c.magenta>就像之前一样 为了让进度保持稳定</c>


206
00:09:03,911 --> 00:09:05,279 line:10%
<c.magenta>让动画不会出现跳跃式的效果</c>


207
00:09:05,879 --> 00:09:07,814 line:10%
<c.magenta>现在当我们调用</c>
<c.magenta>continueAnimation</c>


208
00:09:08,215 --> 00:09:10,651 line:10%
<c.magenta>我们要用到缓出定时函数</c>


209
00:09:10,717 --> 00:09:11,985 line:10%
<c.magenta>同样地 可以看到</c>


210
00:09:12,119 --> 00:09:14,688 line:10%
<c.magenta>我们又转换到新的定时函数</c>


211
00:09:14,755 --> 00:09:16,190 line:10%
<c.magenta>重新对时间进行映射</c>


212
00:09:17,124 --> 00:09:18,926 line:10%
<c.magenta>可以说 这是属性动画生成器</c>


213
00:09:18,992 --> 00:09:20,127 line:10%
<c.magenta>很微妙的一个方面</c>


214
00:09:20,194 --> 00:09:21,461 line:10%
<c.magenta>你们在操控它的时候</c>


215
00:09:21,528 --> 00:09:22,863 line:10%
<c.magenta>了解这个方面尤为重要</c>


216
00:09:26,133 --> 00:09:27,234 line:90%,end
<c.magenta>以上就是如何让动画具有</c>


217
00:09:27,301 --> 00:09:28,569 line:90%,end
<c.magenta>充分交互性和可中断性的方法</c>


218
00:09:28,635 --> 00:09:29,970 line:90%,end
<c.magenta>我们现在来讲一下我们今年提供的</c>


219
00:09:30,037 --> 00:09:31,438 line:90%,end
<c.magenta>一些新的应用程序接口</c>


220
00:09:33,240 --> 00:09:35,475 line:90%,end
<c.magenta>在新的iOS 11里</c>
<c.magenta>属性动画生成器</c>


221
00:09:35,576 --> 00:09:37,578 line:90%,end
<c.magenta>有两个新的属性</c>


222
00:09:38,345 --> 00:09:40,814 line:90%,end
<c.magenta>scrubsLinearly和</c>
<c.magenta>pausesOnCompletion</c>


223
00:09:41,381 --> 00:09:43,283 line:90%,end
<c.magenta>它还有一个新的行为</c>


224
00:09:43,350 --> 00:09:45,018 line:90%,end
<c.magenta>就是开始的时候是暂停的</c>


225
00:09:45,552 --> 00:09:46,954 line:90%,end
<c.magenta>我们来详细讲一下</c>


226
00:09:47,988 --> 00:09:49,590 line:90%,end
<c.magenta>在之前几个例子中</c>


227
00:09:49,690 --> 00:09:51,325 line:90%,end
<c.magenta>可以看到 当我们暂停动画生成器时</c>


228
00:09:51,391 --> 00:09:52,559 line:90%,end
<c.magenta>它把定时函数</c>


229
00:09:52,626 --> 00:09:54,695 line:90%,end
<c.magenta>转换成了线性定时函数</c>
<c.magenta>这么做是为了</c>


230
00:09:54,761 --> 00:09:58,198 line:90%,end
<c.magenta>方便对动画生成器的进度</c>
<c.magenta>进行摩擦操作</c>


231
00:09:58,732 --> 00:10:01,001 line:90%,end
<c.magenta>但有时候</c>
<c.magenta>比较实用的一点是让动画生成器</c>


232
00:10:01,068 --> 00:10:03,737 line:90%,end
<c.magenta>在被互动性地带动时保持其步调</c>


233
00:10:04,171 --> 00:10:06,807 line:90%,end
<c.magenta>你们可以通过关闭线性摩擦来做到这点</c>


234
00:10:07,407 --> 00:10:08,475 line:90%,end
<c.magenta>我们很快讲一个例子</c>


235
00:10:08,542 --> 00:10:10,277 line:90%,end
<c.magenta>在这里 我们线性地摩擦</c>


236
00:10:10,344 --> 00:10:12,446 line:90%,end
<c.magenta>顶部圆圈的透明度属性</c>


237
00:10:12,713 --> 00:10:14,147 line:90%,end
<c.magenta>同时我们非线性地摩擦</c>


238
00:10:14,214 --> 00:10:15,983 line:90%,end
<c.magenta>底部圆圈的透明度属性</c>


239
00:10:16,083 --> 00:10:17,885 line:90%,end
<c.magenta>基于缓出定时函数</c>


240
00:10:19,086 --> 00:10:20,153 line:90%,end
<c.magenta>我们稍后就会明白</c>


241
00:10:20,220 --> 00:10:21,655 line:90%,end
<c.magenta>当我们在协调不同的转变过程时</c>


242
00:10:21,722 --> 00:10:23,323 line:90%,end
<c.magenta>这对于打造吸引眼球的动画来说</c>


243
00:10:23,390 --> 00:10:27,127 line:90%,end
<c.magenta>会是很有意思的一件事</c>


244
00:10:28,896 --> 00:10:31,131 line:90%,end
<c.magenta>现在动画生成器在完成时也可以暂停</c>


245
00:10:32,332 --> 00:10:35,002 line:90%,end
<c.magenta>所以 当动画生成器的动画结束时</c>


246
00:10:35,068 --> 00:10:37,771 line:90%,end
<c.magenta>它会自动转变为非待命的状态</c>


247
00:10:38,071 --> 00:10:38,939 line:90%,end
<c.magenta>当它这么做的时候</c>


248
00:10:39,006 --> 00:10:40,407 line:90%,end
<c.magenta>它会释放出它之前跟踪的</c>


249
00:10:40,474 --> 00:10:42,075 line:90%,end
<c.magenta>任何动画</c>


250
00:10:42,142 --> 00:10:43,977 line:90%,end
<c.magenta>这意味着你们不能操控动画</c>


251
00:10:44,044 --> 00:10:46,280 line:90%,end
<c.magenta>或者在动画结束后倒退回去</c>


252
00:10:46,914 --> 00:10:49,416 line:10%
<c.magenta>但现在</c>
<c.magenta>如果你们在完成值为真值时设定了暂停</c>


253
00:10:49,516 --> 00:10:52,152 line:10%
<c.magenta>动画生成器就会</c>
<c.magenta>在100%的完成部分处暂停</c>


254
00:10:52,352 --> 00:10:54,154 line:10%
<c.magenta>这样你就可以在未来任何时候</c>


255
00:10:54,221 --> 00:10:55,589 line:10%
<c.magenta>倒转这些动画</c>


256
00:10:57,858 --> 00:10:59,359 line:90%,end
<c.magenta>为了让你们有更好的了解</c>


257
00:10:59,426 --> 00:11:01,128 line:90%,end
<c.magenta>我们把它运用到UIKit的</c>


258
00:11:01,295 --> 00:11:02,129 line:90%,end
<c.magenta>拖放里</c>


259
00:11:03,197 --> 00:11:05,165 line:90%,end
<c.magenta>下面是一个抬起的动画</c>


260
00:11:05,232 --> 00:11:06,166 line:90%,end
<c.magenta>你们可能已经知道</c>


261
00:11:06,233 --> 00:11:08,669 line:90%,end
<c.magenta>你们可以提供附属的动画</c>


262
00:11:08,735 --> 00:11:10,103 line:90%,end
<c.magenta>来对其进行自定义设计</c>


263
00:11:10,704 --> 00:11:13,073 line:90%,end
<c.magenta>而实际上 我们要用属性动画生成器</c>


264
00:11:13,140 --> 00:11:14,408 line:90%,end
<c.magenta>驱动这些</c>


265
00:11:14,474 --> 00:11:17,010 line:90%,end
<c.magenta>结束时暂停的UIKit内置动画</c>


266
00:11:17,678 --> 00:11:21,148 line:90%,end
<c.magenta>因此 我们可以帮你们</c>
<c.magenta>在用户抬起手指后的任何时候</c>


267
00:11:21,215 --> 00:11:24,685 line:90%,end
<c.magenta>便捷地倒转这些动画</c>


268
00:11:24,885 --> 00:11:27,187 line:90%,end
<c.magenta>即便你们的动画已经结束</c>


269
00:11:31,225 --> 00:11:32,259 line:10%
<c.magenta>我还想提的一点是</c>


270
00:11:32,326 --> 00:11:34,561 line:10%
<c.magenta>当动画在结束时暂停的时候</c>
<c.magenta>我们不会调用</c>


271
00:11:34,628 --> 00:11:36,096 line:10%
<c.magenta>动画生成器的完成处理器</c>


272
00:11:36,363 --> 00:11:37,464 line:10%
<c.magenta>但若你们感兴趣 想知道</c>


273
00:11:37,531 --> 00:11:38,699 line:10%
<c.magenta>当这些动画结束时</c>


274
00:11:38,765 --> 00:11:41,001 line:10%
<c.magenta>你们只需观察其running属性</c>


275
00:11:43,337 --> 00:11:45,706 line:90%,end
<c.magenta>最后 你们可以创建属性动画生成器</c>


276
00:11:45,772 --> 00:11:48,709 line:90%,end
<c.magenta>在给它提供动画之前启动它</c>


277
00:11:49,209 --> 00:11:50,177 line:90%,end
<c.magenta>这个会造成的结果是</c>


278
00:11:50,244 --> 00:11:52,546 line:90%,end
<c.magenta>你们接下来提供的任何动画模块</c>


279
00:11:52,613 --> 00:11:55,148 line:90%,end
<c.magenta>会立即运行而不是被跳过</c>


280
00:11:55,215 --> 00:11:58,352 line:90%,end
<c.magenta>如果你们将任何UIView</c>
<c.magenta>的动画代码</c>


281
00:11:58,418 --> 00:12:00,254 line:90%,end
<c.magenta>转成使用属性动画生成器</c>
<c.magenta>这就会很有帮助</c>


282
00:12:03,323 --> 00:12:04,992 line:90%,end
<c.magenta>现在 我想花几分钟</c>


283
00:12:05,058 --> 00:12:06,660 line:90%,end
<c.magenta>谈谈弹簧动画</c>


284
00:12:06,994 --> 00:12:10,130 line:90%,end
<c.magenta>弹簧动画在iOS上的UIKit中</c>
<c.magenta>很常见</c>


285
00:12:10,297 --> 00:12:12,666 line:90%,end
<c.magenta>它们会给你的动画添加一种现实感</c>


286
00:12:13,534 --> 00:12:15,969 line:90%,end
<c.magenta>现在 在UIKit中</c>
<c.magenta>我们提供两种弹簧动画</c>


287
00:12:16,170 --> 00:12:18,605 line:90%,end
<c.magenta>分别是临界阻尼弹簧动画</c>
<c.magenta>和欠阻尼弹簧动画</c>


288
00:12:19,506 --> 00:12:20,507 line:90%,end
<c.magenta>临界阻尼弹簧动画</c>


289
00:12:20,574 --> 00:12:21,875 line:90%,end
<c.magenta>是迅速地加速</c>


290
00:12:21,942 --> 00:12:23,710 line:90%,end
<c.magenta>并迅速地减速</c>


291
00:12:23,777 --> 00:12:25,412 line:90%,end
<c.magenta>悬停在其目标值上</c>


292
00:12:26,246 --> 00:12:27,915 line:90%,end
<c.magenta>而欠阻尼弹簧动画</c>


293
00:12:27,981 --> 00:12:30,017 line:90%,end
<c.magenta>是迅速在远离其目标值处加速</c>


294
00:12:30,083 --> 00:12:31,351 line:90%,end
<c.magenta>然后再震荡</c>


295
00:12:32,819 --> 00:12:34,755 line:90%,end
<c.magenta>弹簧动画从这方面来说是独一无二的</c>


296
00:12:35,088 --> 00:12:36,523 line:90%,end
<c.magenta>我们就把弹簧动画</c>


297
00:12:36,590 --> 00:12:38,759 line:90%,end
<c.magenta>看做是定时曲线一样</c>


298
00:12:39,059 --> 00:12:40,661 line:90%,end
<c.magenta>但弹簧动画从另一方面来说也是独特的</c>


299
00:12:40,794 --> 00:12:41,995 line:90%,end
<c.magenta>就是它们总是</c>


300
00:12:42,062 --> 00:12:43,931 line:90%,end
<c.magenta>从当前所呈现的值处产生动画</c>


301
00:12:44,298 --> 00:12:46,366 line:90%,end
<c.magenta>我们这么做的原因有很多</c>


302
00:12:47,968 --> 00:12:49,002 line:90%,end
<c.magenta>那么首先是</c>


303
00:12:49,169 --> 00:12:50,604 line:90%,end
<c.magenta>它实际上可能是未定义的</c>


304
00:12:50,671 --> 00:12:51,972 line:90%,end
<c.magenta>用于把弹簧动画</c>


305
00:12:52,039 --> 00:12:53,273 line:90%,end
<c.magenta>转化成立体动画</c>


306
00:12:53,440 --> 00:12:55,108 line:90%,end
<c.magenta>这是因为立方定时函数</c>


307
00:12:55,209 --> 00:12:57,110 line:90%,end
<c.magenta>不会在它们的值周围震荡</c>
<c.magenta>或超越它们的值</c>


308
00:12:57,244 --> 00:12:59,680 line:90%,end
<c.magenta>因为它们受最大和最小值的约束</c>


309
00:13:02,349 --> 00:13:03,450 line:90%,end
<c.magenta>第二个原因</c>


310
00:13:03,517 --> 00:13:06,119 line:90%,end
<c.magenta>更有意思 这是…</c>


311
00:13:06,420 --> 00:13:09,089 line:90%,end
<c.magenta>如果你以二维初始速度</c>


312
00:13:09,156 --> 00:13:11,325 line:90%,end
<c.magenta>和唯一DX和DY组件执行动画</c>


313
00:13:11,625 --> 00:13:14,528 line:90%,end
<c.magenta>属性动画器实际上会为你分解它</c>


314
00:13:14,595 --> 00:13:16,530 line:90%,end
<c.magenta>并创建两个弹簧动画</c>


315
00:13:17,030 --> 00:13:18,432 line:90%,end
<c.magenta>因为这两个弹簧动画</c>


316
00:13:18,498 --> 00:13:20,100 line:90%,end
<c.magenta>速度不一样</c>


317
00:13:20,167 --> 00:13:21,235 line:90%,end
<c.magenta>它们是不同步的</c>


318
00:13:21,301 --> 00:13:24,304 line:90%,end
<c.magenta>所以我们就不能把这两个弹簧动画</c>
<c.magenta>转换成一个立体动画</c>


319
00:13:27,007 --> 00:13:28,976 line:90%,end
<c.magenta>那么如果你不得不中断弹簧动画</c>


320
00:13:29,042 --> 00:13:30,811 line:90%,end
<c.magenta>这是一些最佳范例</c>


321
00:13:31,645 --> 00:13:32,613 line:90%,end
<c.magenta>那么你要做的第一件事</c>


322
00:13:32,713 --> 00:13:34,348 line:90%,end
<c.magenta>就是考虑停止你的弹簧动画</c>


323
00:13:34,414 --> 00:13:36,617 line:90%,end
<c.magenta>并把当前所呈现的值提升为模型值</c>


324
00:13:36,817 --> 00:13:38,752 line:90%,end
<c.magenta>然后创建一个全新的动画</c>


325
00:13:40,521 --> 00:13:41,755 line:90%,end
<c.magenta>你要做的第二件事</c>


326
00:13:41,855 --> 00:13:43,724 line:90%,end
<c.magenta>是考虑使用一个没有初始速度的</c>


327
00:13:43,790 --> 00:13:44,791 line:90%,end
<c.magenta>临界阻尼弹簧动画</c>


328
00:13:44,858 --> 00:13:47,327 line:90%,end
<c.magenta>因为这些不会超越或震荡</c>


329
00:13:48,428 --> 00:13:49,563 line:90%,end
<c.magenta>那么最后</c>


330
00:13:49,663 --> 00:13:52,199 line:90%,end
<c.magenta>如果你以二维初始速度</c>


331
00:13:52,266 --> 00:13:54,168 line:90%,end
<c.magenta>和唯一的X和Y组件执行动画</c>


332
00:13:54,735 --> 00:13:57,004 line:90%,end
<c.magenta>你可以考虑自己分解它</c>


333
00:13:57,171 --> 00:13:59,940 line:90%,end
<c.magenta>并用一个动画器驱动X动画</c>


334
00:14:00,007 --> 00:14:01,842 line:90%,end
<c.magenta>用另一个动画器驱动Y动画</c>


335
00:14:04,711 --> 00:14:07,114 line:90%,end
<c.magenta>那么这是属性动画的运作方式</c>


336
00:14:07,681 --> 00:14:08,549 line:90%,end
<c.magenta>现在让我们谈谈</c>


337
00:14:08,615 --> 00:14:09,750 line:90%,end
<c.magenta>如何利用这些知识</c>


338
00:14:09,816 --> 00:14:11,652 line:90%,end
<c.magenta>协调动画</c>


339
00:14:12,419 --> 00:14:13,987 line:90%,end
<c.magenta>那么在这部分我们要创建</c>


340
00:14:14,054 --> 00:14:15,022 line:90%,end
<c.magenta>一个完全交互性的</c>


341
00:14:15,088 --> 00:14:16,924 line:90%,end
<c.magenta>可中断的动画转换</c>


342
00:14:17,124 --> 00:14:20,727 line:90%,end
<c.magenta>在多个唯一的定时动画之间进行协调</c>


343
00:14:22,362 --> 00:14:23,664 line:90%,end
<c.magenta>假如说我们有一款应用</c>


344
00:14:23,730 --> 00:14:25,399 line:90%,end
<c.magenta>在屏幕底部</c>


345
00:14:25,699 --> 00:14:27,100 line:90%,end
<c.magenta>显示一些内容</c>


346
00:14:27,167 --> 00:14:28,202 line:90%,end
<c.magenta>有一个评论按钮</c>


347
00:14:28,335 --> 00:14:29,169 line:90%,end
<c.magenta>当我们轻触它时</c>


348
00:14:29,236 --> 00:14:31,405 line:90%,end
<c.magenta>它会展开并显示我们的评论视图</c>


349
00:14:32,372 --> 00:14:33,440 line:90%,end
<c.magenta>现在我们可能通过</c>


350
00:14:33,507 --> 00:14:36,677 line:90%,end
<c.magenta>比如UIView控制器动画转换实现</c>


351
00:14:37,277 --> 00:14:40,113 line:90%,end
<c.magenta>但我们想让这个变得完全交互和可中断</c>


352
00:14:40,214 --> 00:14:41,682 line:90%,end
<c.magenta>所以我想给你演示如何实现</c>


353
00:14:43,183 --> 00:14:44,484 line:90%,end
<c.magenta>那么我们要做的第一件事</c>


354
00:14:44,551 --> 00:14:46,186 line:90%,end
<c.magenta>就是增加两个手势识别器</c>


355
00:14:46,253 --> 00:14:48,889 line:90%,end
<c.magenta>一个轻触手势识别器</c>
<c.magenta>以便我们可以轻触它并让它展开</c>


356
00:14:48,956 --> 00:14:50,791 line:90%,end
<c.magenta>再次轻触它 它会折叠起来</c>


357
00:14:51,024 --> 00:14:52,426 line:90%,end
<c.magenta>我们还希望</c>


358
00:14:52,492 --> 00:14:53,560 line:90%,end
<c.magenta>当动画运行时轻触它</c>


359
00:14:53,627 --> 00:14:54,895 line:90%,end
<c.magenta>从而使它可被撤销</c>


360
00:14:55,662 --> 00:14:58,498 line:90%,end
<c.magenta>且我们要添加一个拖拽手势识别器</c>
<c.magenta>以便我们可以与它交互</c>


361
00:14:58,999 --> 00:15:00,400 line:90%,end
<c.magenta>这是我们之前的代码格式</c>


362
00:15:00,901 --> 00:15:03,237 line:90%,end
<c.magenta>我们要对它进行一些修改</c>


363
00:15:03,337 --> 00:15:04,505 line:90%,end
<c.magenta>来创建这个基础结构</c>


364
00:15:04,571 --> 00:15:05,772 line:90%,end
<c.magenta>从而在这上边创建动画</c>


365
00:15:06,507 --> 00:15:07,708 line:90%,end
<c.magenta>我们要做的第一件事</c>


366
00:15:07,841 --> 00:15:08,876 line:90%,end
<c.magenta>就是替换</c>


367
00:15:08,942 --> 00:15:10,777 line:90%,end
<c.magenta>我们的属性动画器的实例</c>


368
00:15:10,878 --> 00:15:13,447 line:90%,end
<c.magenta>用运行属性动画器的一个集合替换它</c>


369
00:15:14,982 --> 00:15:16,316 line:90%,end
<c.magenta>对于那个</c>


370
00:15:16,383 --> 00:15:18,352 line:90%,end
<c.magenta>运行属性动画器的集合</c>


371
00:15:18,685 --> 00:15:20,187 line:90%,end
<c.magenta>如果我们创建过属性动画器</c>


372
00:15:20,254 --> 00:15:21,622 line:90%,end
<c.magenta>我们只需要把它添加到那个集合中即可</c>


373
00:15:21,688 --> 00:15:23,891 line:90%,end
<c.magenta>让我们假设当这些动画完成时</c>


374
00:15:23,957 --> 00:15:25,292 line:90%,end
<c.magenta>它会被自动移除</c>


375
00:15:26,560 --> 00:15:27,794 line:90%,end
<c.magenta>接下来我们要重新引入</c>


376
00:15:27,861 --> 00:15:29,530 line:90%,end
<c.magenta>我们的animateTransition</c>
<c.magenta>IfNeeded方法</c>


377
00:15:29,596 --> 00:15:30,797 line:90%,end
<c.magenta>它将会获取</c>


378
00:15:30,864 --> 00:15:32,699 line:90%,end
<c.magenta>一个动画的目标状态</c>


379
00:15:32,966 --> 00:15:34,101 line:90%,end
<c.magenta>如果我们看一下这个</c>


380
00:15:35,636 --> 00:15:37,237 line:90%,end
<c.magenta>如果我们的</c>
<c.magenta>runningAnimators.isEmpty</c>


381
00:15:37,304 --> 00:15:39,239 line:90%,end
<c.magenta>那意味着当前没有任何运行的转换</c>


382
00:15:39,406 --> 00:15:42,176 line:90%,end
<c.magenta>那么如果是这种情况的话</c>
<c.magenta>我们要发起一个转换</c>


383
00:15:42,242 --> 00:15:45,078 line:90%,end
<c.magenta>并且我们要通过给我们的帧</c>
<c.magenta>创建一个新属性动画器来实现</c>


384
00:15:45,145 --> 00:15:47,014 line:90%,end
<c.magenta>我们将在临界阻尼弹簧动画中使用它</c>


385
00:15:47,648 --> 00:15:49,249 line:90%,end
<c.magenta>然后我们要执行我们的动画</c>


386
00:15:49,449 --> 00:15:51,084 line:90%,end
<c.magenta>并启动那个动画器</c>


387
00:15:51,151 --> 00:15:53,086 line:90%,end
<c.magenta>将其添加到那个运行动画器的集合中</c>


388
00:15:56,657 --> 00:15:58,692 line:90%,end
<c.magenta>接下来</c>
<c.magenta>在我们的轻触手势识别器处理器中</c>


389
00:15:58,759 --> 00:15:59,793 line:90%,end
<c.magenta>我们要调用这个方法</c>


390
00:16:00,127 --> 00:16:03,463 line:90%,end
<c.magenta>这将会对我们的运行的转换</c>
<c.magenta>执行动画或倒转</c>


391
00:16:03,730 --> 00:16:05,766 line:90%,end
<c.magenta>那么如果我们的转换没有在运行</c>


392
00:16:05,832 --> 00:16:07,768 line:90%,end
<c.magenta>我们只需要发起我们的转换即可</c>


393
00:16:08,135 --> 00:16:11,772 line:90%,end
<c.magenta>否则我们将在所有</c>
<c.magenta>运行属性动画器之间进行迭代</c>


394
00:16:11,839 --> 00:16:12,840 line:90%,end
<c.magenta>并倒转它们</c>


395
00:16:16,944 --> 00:16:18,312 line:90%,end
<c.magenta>现在对于接下来的三个方法</c>


396
00:16:18,378 --> 00:16:19,279 line:90%,end
<c.magenta>我们只需要从之前的代码中提取</c>


397
00:16:19,346 --> 00:16:22,950 line:90%,end
<c.magenta>我们的拖拽手势识别器处理代码即可</c>


398
00:16:23,050 --> 00:16:25,052 line:90%,end
<c.magenta>我要快速总结这些是做什么用的</c>


399
00:16:25,419 --> 00:16:27,120 line:90%,end
<c.magenta>对于</c>
<c.magenta>startInteractiveTransition</c>


400
00:16:27,187 --> 00:16:29,056 line:90%,end
<c.magenta>当你的手势开始时调用</c>


401
00:16:29,223 --> 00:16:31,592 line:90%,end
<c.magenta>如果转换没有运行 它会发起转换</c>


402
00:16:31,658 --> 00:16:33,994 line:90%,end
<c.magenta>一律暂停全部动画</c>


403
00:16:34,127 --> 00:16:36,563 line:90%,end
<c.magenta>并保存其产生的任何相对进度</c>


404
00:16:38,432 --> 00:16:39,600 line:90%,end
<c.magenta>UpdateInteractiveTransition</c>


405
00:16:39,666 --> 00:16:42,469 line:90%,end
<c.magenta>将一致地拖动你的动画</c>


406
00:16:42,703 --> 00:16:45,138 line:90%,end
<c.magenta>相对于你手指移动的距离</c>


407
00:16:45,205 --> 00:16:47,407 line:90%,end
<c.magenta>你的动画之前所做出的任何进展</c>


408
00:16:47,474 --> 00:16:48,775 line:90%,end
<c.magenta>将被中断</c>


409
00:16:49,476 --> 00:16:50,878 line:10%
<c.magenta>然后最终当你的手指抬起时</c>


410
00:16:50,944 --> 00:16:52,179 line:10%
<c.magenta>我们会调用继续动画</c>


411
00:16:52,246 --> 00:16:54,381 line:10%
<c.magenta>在你的全部动画器上 酌情倒转它们</c>


412
00:16:54,448 --> 00:16:56,416 line:10%
<c.magenta>基于你手指的移动方向</c>


413
00:16:57,918 --> 00:16:58,952 line:90%,end
<c.magenta>让我们来检验一下</c>


414
00:17:00,521 --> 00:17:02,122 line:90%,end
<c.magenta>我们可以非交互式地驱动动画</c>


415
00:17:02,222 --> 00:17:03,857 line:90%,end
<c.magenta>通过轻触</c>


416
00:17:04,223 --> 00:17:05,858 line:90%,end
<c.magenta>我们还可以交互式地驱动它</c>


417
00:17:06,560 --> 00:17:08,095 line:90%,end
<c.magenta>通过向上或向下推</c>


418
00:17:09,530 --> 00:17:12,031 line:90%,end
<c.magenta>当它运行时 我们可以再次轻触它</c>


419
00:17:12,098 --> 00:17:13,666 line:90%,end
<c.magenta>来中断它或倒转它</c>


420
00:17:14,468 --> 00:17:17,003 line:90%,end
<c.magenta>当它运行时我们还可以捕捉动画</c>


421
00:17:17,069 --> 00:17:18,638 line:90%,end
<c.magenta>就在我们拖动它的那一点上进行捕捉</c>


422
00:17:19,940 --> 00:17:22,209 line:90%,end
<c.magenta>那么现在我们已创建了这个基础结构</c>


423
00:17:22,643 --> 00:17:24,377 line:90%,end
<c.magenta>现在我们有了一个帧动画</c>


424
00:17:24,444 --> 00:17:25,444 line:90%,end
<c.magenta>看起来没什么意思</c>


425
00:17:25,512 --> 00:17:27,414 line:90%,end
<c.magenta>那么让我们把它变得更有意思一点儿</c>


426
00:17:29,049 --> 00:17:29,883 line:90%,end
<c.magenta>那么我们要做的第一件事</c>


427
00:17:29,950 --> 00:17:31,552 line:90%,end
<c.magenta>就是要添加一个交互式模糊</c>


428
00:17:33,287 --> 00:17:36,723 line:90%,end
<c.magenta>现在我们在iOS 8中引入了</c>
<c.magenta>UIVisualEffectView</c>


429
00:17:36,890 --> 00:17:37,991 line:90%,end
<c.magenta>允许我们添加模糊和活力</c>


430
00:17:38,058 --> 00:17:39,893 line:90%,end
<c.magenta>给我们的视图层级</c>


431
00:17:40,427 --> 00:17:41,595 line:90%,end
<c.magenta>原来</c>


432
00:17:41,828 --> 00:17:43,730 line:90%,end
<c.magenta>VisualEffectsView</c>
<c.magenta>的效果属性</c>


433
00:17:43,797 --> 00:17:46,466 line:90%,end
<c.magenta>是一个可动画属性 那么这很棒</c>


434
00:17:47,134 --> 00:17:48,435 line:90%,end
<c.magenta>那么我们在这里要做的是</c>


435
00:17:48,502 --> 00:17:50,237 line:90%,end
<c.magenta>我们要修改的唯一一处代码</c>


436
00:17:50,304 --> 00:17:52,239 line:90%,end
<c.magenta>是修改动画转换 如果需要的话</c>


437
00:17:52,873 --> 00:17:55,442 line:90%,end
<c.magenta>我们只需要给模糊创建一个新动画器</c>


438
00:17:55,709 --> 00:17:58,278 line:90%,end
<c.magenta>那将会使用一个临界阻尼弹簧动画</c>
<c.magenta>至少目前是这样</c>


439
00:17:58,912 --> 00:18:00,781 line:90%,end
<c.magenta>然后我们要在这里执行我们的动画</c>


440
00:18:00,848 --> 00:18:02,683 line:90%,end
<c.magenta>无论是否设置了模糊效果</c>


441
00:18:02,983 --> 00:18:04,184 line:90%,end
<c.magenta>启动我们的模糊动画器</c>


442
00:18:04,251 --> 00:18:05,552 line:90%,end
<c.magenta>并将其添加到那个集合中</c>


443
00:18:06,019 --> 00:18:07,154 line:90%,end
<c.magenta>这就是我们所得到的</c>


444
00:18:13,227 --> 00:18:15,696 line:90%,end
<c.magenta>那么我们现在有了一个</c>
<c.magenta>交互式的模糊动画</c>


445
00:18:17,664 --> 00:18:22,803 line:90%,end
<c.magenta>但让我们以慢动作再看一次</c>


446
00:18:22,870 --> 00:18:25,105 line:90%,end
<c.magenta>因为我必须要对你们实事求是</c>


447
00:18:25,239 --> 00:18:26,340 line:90%,end
<c.magenta>我不知道</c>


448
00:18:26,406 --> 00:18:27,774 line:90%,end
<c.magenta>这个模糊动画是否真的搞对了</c>


449
00:18:28,542 --> 00:18:29,576 line:90%,end
<c.magenta>我感觉它动得</c>


450
00:18:29,676 --> 00:18:31,712 line:90%,end
<c.magenta>可能有点儿太快了</c>


451
00:18:32,513 --> 00:18:34,848 line:90%,end
<c.magenta>现在让我们驱动这个并查看一下</c>


452
00:18:35,315 --> 00:18:36,316 line:90%,end
<c.magenta>也许看起来好点了</c>


453
00:18:36,583 --> 00:18:38,385 line:90%,end
<c.magenta>但看起来仍然不对劲儿</c>


454
00:18:39,253 --> 00:18:40,888 line:90%,end
<c.magenta>可能有几种原因导致了这种情况</c>


455
00:18:41,788 --> 00:18:44,224 line:90%,end
<c.magenta>首先是因为</c>
<c.magenta>我们使用了临界阻尼弹簧动画</c>


456
00:18:44,291 --> 00:18:46,360 line:90%,end
<c.magenta>我们的模糊在临界阻尼弹簧中</c>
<c.magenta>动得太快了</c>


457
00:18:47,227 --> 00:18:48,929 line:90%,end
<c.magenta>因为我们的属性动画器</c>


458
00:18:48,996 --> 00:18:50,597 line:90%,end
<c.magenta>将会线性地拖动它</c>


459
00:18:50,764 --> 00:18:51,999 line:90%,end
<c.magenta>我们的模糊仍然</c>


460
00:18:52,065 --> 00:18:53,000 line:90%,end
<c.magenta>动得有点太快了</c>


461
00:18:53,066 --> 00:18:55,035 line:90%,end
<c.magenta>并且它停止动画的速度太慢了</c>


462
00:18:55,736 --> 00:18:57,938 line:90%,end
<c.magenta>那么为了修复这个 我们实际上要提供</c>


463
00:18:58,005 --> 00:18:59,706 line:90%,end
<c.magenta>我们自己的自定义定时曲线</c>


464
00:18:59,773 --> 00:19:01,275 line:90%,end
<c.magenta>我们的自定义缓缓进入函数</c>


465
00:19:01,341 --> 00:19:03,477 line:90%,end
<c.magenta>所以我们的模糊动地非常慢</c>


466
00:19:03,544 --> 00:19:04,945 line:90%,end
<c.magenta>而自定义减缓了定时函数</c>


467
00:19:05,012 --> 00:19:06,980 line:90%,end
<c.magenta>所以它结束地非常快</c>


468
00:19:07,481 --> 00:19:09,716 line:90%,end
<c.magenta>因为它们是相互的倒置</c>


469
00:19:09,783 --> 00:19:11,518 line:90%,end
<c.magenta>我们要获取对称节奏</c>


470
00:19:11,685 --> 00:19:14,087 line:90%,end
<c.magenta>意思是动画在退出时的节奏</c>


471
00:19:14,154 --> 00:19:16,123 line:90%,end
<c.magenta>要与其进入一半时的节奏相匹配</c>


472
00:19:17,391 --> 00:19:18,425 line:90%,end
<c.magenta>那么这是代码</c>


473
00:19:18,492 --> 00:19:20,060 line:90%,end
<c.magenta>我们只是创建了立体定时参数</c>


474
00:19:20,127 --> 00:19:21,528 line:90%,end
<c.magenta>根据目标状态</c>


475
00:19:21,862 --> 00:19:23,764 line:90%,end
<c.magenta>然后我们要在这里禁用线性拖动</c>


476
00:19:23,830 --> 00:19:25,766 line:90%,end
<c.magenta>从而使我们的动画器保持其节奏</c>


477
00:19:25,832 --> 00:19:27,634 line:90%,end
<c.magenta>当我们交互式地驱动它时</c>


478
00:19:28,468 --> 00:19:29,703 line:90%,end
<c.magenta>那么让我们再次检验一下</c>


479
00:19:33,640 --> 00:19:34,775 line:90%,end
<c.magenta>好多了</c>


480
00:19:34,842 --> 00:19:36,009 line:90%,end
<c.magenta>非常微妙</c>


481
00:19:36,076 --> 00:19:37,444 line:90%,end
<c.magenta>但这次好多了</c>


482
00:19:37,511 --> 00:19:38,879 line:90%,end
<c.magenta>让我们再</c>


483
00:19:38,946 --> 00:19:39,813 line:90%,end
<c.magenta>慢一点</c>


484
00:19:39,880 --> 00:19:40,914 line:90%,end
<c.magenta>那么你实际上了解了</c>


485
00:19:40,981 --> 00:19:41,982 line:90%,end
<c.magenta>它是什么样子的</c>


486
00:19:46,453 --> 00:19:47,888 line:90%,end
<c.magenta>同时让我们交互式驱动那个</c>


487
00:19:47,955 --> 00:19:50,524 line:90%,end
<c.magenta>所以你可以看到它真的保持了它的节奏</c>


488
00:19:50,591 --> 00:19:52,092 line:90%,end
<c.magenta>当你交互式地驱动它时</c>


489
00:19:55,629 --> 00:19:58,799 line:90%,end
<c.magenta>很酷 那么现在我们有两个属性驱动器</c>


490
00:19:58,866 --> 00:20:00,567 line:90%,end
<c.magenta>带有唯一定时特性</c>


491
00:20:00,634 --> 00:20:02,536 line:90%,end
<c.magenta>可应用于我们的整个转换</c>


492
00:20:03,203 --> 00:20:05,072 line:90%,end
<c.magenta>当让我们把它变得再有意思一点</c>


493
00:20:05,138 --> 00:20:06,373 line:90%,end
<c.magenta>我现在想演示</c>


494
00:20:06,440 --> 00:20:08,475 line:90%,end
<c.magenta>一个技巧 我要调用视图变形</c>


495
00:20:09,243 --> 00:20:10,611 line:90%,end
<c.magenta>那么假设我有一个标签</c>


496
00:20:10,777 --> 00:20:12,613 line:90%,end
<c.magenta>在本例中我们有一个标签…</c>


497
00:20:12,679 --> 00:20:14,448 line:90%,end
<c.magenta>它是蓝色的 有点小</c>


498
00:20:14,515 --> 00:20:15,749 line:90%,end
<c.magenta>它是常规字体</c>


499
00:20:16,016 --> 00:20:18,185 line:90%,end
<c.magenta>我们想把它变得比现在大许多</c>
<c.magenta>也许换个颜色</c>


500
00:20:18,252 --> 00:20:19,620 line:90%,end
<c.magenta>也许换个粗点的字体</c>


501
00:20:20,053 --> 00:20:21,788 line:90%,end
<c.magenta>那么那个转换是什么样的呢？</c>


502
00:20:22,890 --> 00:20:25,225 line:90%,end
<c.magenta>嗯 这是视图变形</c>


503
00:20:25,292 --> 00:20:26,627 line:90%,end
<c.magenta>它是一种两个视图的比例转化</c>


504
00:20:26,693 --> 00:20:28,996 line:90%,end
<c.magenta>和不透明度的混合</c>


505
00:20:29,329 --> 00:20:31,265 line:90%,end
<c.magenta>那么在本例中</c>
<c.magenta>我们要使用UILabels</c>


506
00:20:31,331 --> 00:20:34,468 line:90%,end
<c.magenta>但这种技巧通常可应用于</c>
<c.magenta>任意视图或视图层级；</c>


507
00:20:34,535 --> 00:20:35,702 line:90%,end
<c.magenta>而不只是标签</c>


508
00:20:37,104 --> 00:20:37,971 line:90%,end
<c.magenta>那么在我们的应用中</c>


509
00:20:38,238 --> 00:20:39,439 line:90%,end
<c.magenta>我们要获取评论标签</c>


510
00:20:39,506 --> 00:20:40,541 line:90%,end
<c.magenta>我们要把它变成蓝色</c>


511
00:20:40,607 --> 00:20:41,441 line:90%,end
<c.magenta>当它展开时</c>


512
00:20:41,508 --> 00:20:43,010 line:90%,end
<c.magenta>我们想让它变成这样</c>


513
00:20:43,076 --> 00:20:44,344 line:90%,end
<c.magenta>请注意它的颜色暗多了</c>


514
00:20:44,411 --> 00:20:45,746 line:90%,end
<c.magenta>但还是稍微嵌入了</c>


515
00:20:45,812 --> 00:20:47,347 line:90%,end
<c.magenta>其父视图的顶部</c>


516
00:20:48,482 --> 00:20:49,383 line:90%,end
<c.magenta>我们要实现的是</c>


517
00:20:49,449 --> 00:20:51,518 line:90%,end
<c.magenta>让它像这样动起来</c>


518
00:20:59,159 --> 00:21:00,594 line:90%,end
<c.magenta>我们要如何创建这个呢？</c>


519
00:21:00,994 --> 00:21:03,463 line:90%,end
<c.magenta>嗯 UILabels不会曝光</c>
<c.magenta>任何可动画属性</c>


520
00:21:03,530 --> 00:21:04,798 line:90%,end
<c.magenta>但这没问题 因为正如我所提到过的</c>


521
00:21:04,865 --> 00:21:08,035 line:90%,end
<c.magenta>这通常可应用于任意视图或视图层级</c>
<c.magenta>而不只是标签</c>


522
00:21:08,836 --> 00:21:10,337 line:90%,end
<c.magenta>我们要做的是使用</c>


523
00:21:10,404 --> 00:21:11,605 line:90%,end
<c.magenta>UIView经常被忽略的转换属性</c>


524
00:21:13,340 --> 00:21:15,409 line:90%,end
<c.magenta>并且我们要计算</c>


525
00:21:15,475 --> 00:21:16,743 line:90%,end
<c.magenta>两个标签的比例转换</c>


526
00:21:16,810 --> 00:21:18,912 line:90%,end
<c.magenta>从而我们可以把它们相互混合在一起</c>


527
00:21:19,179 --> 00:21:21,548 line:90%,end
<c.magenta>我们要推动它们的不透明度</c>


528
00:21:21,615 --> 00:21:23,250 line:90%,end
<c.magenta>从而可以把它们混合在一起</c>


529
00:21:24,852 --> 00:21:25,686 line:90%,end
<c.magenta>我们要做的第一件事</c>


530
00:21:25,752 --> 00:21:26,920 line:90%,end
<c.magenta>就是计算比例</c>


531
00:21:27,654 --> 00:21:29,790 line:90%,end
<c.magenta>看起来这非常容易</c>


532
00:21:29,857 --> 00:21:31,325 line:90%,end
<c.magenta>只是一个简单的尺寸比例</c>


533
00:21:31,391 --> 00:21:32,593 line:90%,end
<c.magenta>基于目标尺寸</c>


534
00:21:32,659 --> 00:21:33,861 line:90%,end
<c.magenta>和当前尺寸</c>


535
00:21:34,094 --> 00:21:36,196 line:90%,end
<c.magenta>并且事实上 一旦你计算了其中一个</c>


536
00:21:36,296 --> 00:21:37,664 line:90%,end
<c.magenta>你基本上就免费得到了另一个</c>


537
00:21:37,731 --> 00:21:39,032 line:90%,end
<c.magenta>通过取倒数就可以</c>


538
00:21:40,667 --> 00:21:41,869 line:90%,end
<c.magenta>现在计算转换</c>


539
00:21:41,935 --> 00:21:43,170 line:90%,end
<c.magenta>变得稍微有意思点了</c>


540
00:21:43,403 --> 00:21:46,006 line:90%,end
<c.magenta>这是因为我们推动了我们的比例</c>


541
00:21:46,073 --> 00:21:48,509 line:90%,end
<c.magenta>那会影响转换过程中的边界</c>


542
00:21:48,742 --> 00:21:49,710 line:90%,end
<c.magenta>所以我们不能仅仅简单地</c>


543
00:21:49,776 --> 00:21:51,211 line:90%,end
<c.magenta>获取Y偏移</c>


544
00:21:51,445 --> 00:21:52,613 line:90%,end
<c.magenta>但我们可以做的是</c>


545
00:21:52,679 --> 00:21:55,282 line:90%,end
<c.magenta>预应用那个转换比例</c>


546
00:21:55,349 --> 00:21:57,751 line:90%,end
<c.magenta>以获取Y偏移的新值</c>


547
00:21:57,818 --> 00:21:59,553 line:90%,end
<c.magenta>并且我们可以用于转换中</c>


548
00:22:00,954 --> 00:22:02,289 line:10%
<c.magenta>现在我们要驱动这个</c>


549
00:22:02,356 --> 00:22:03,724 line:10%
<c.magenta>通过三个动画器</c>


550
00:22:03,790 --> 00:22:05,125 line:10%
<c.magenta>用一个临界阻尼弹簧</c>


551
00:22:05,192 --> 00:22:06,159 line:10%
<c.magenta>来驱动我们的转换</c>


552
00:22:06,226 --> 00:22:09,029 line:10%
<c.magenta>从而使它遵守转换的整个路径</c>


553
00:22:09,296 --> 00:22:11,198 line:10%
<c.magenta>然后缓入和缓出动画</c>


554
00:22:11,265 --> 00:22:12,866 line:10%
<c.magenta>以执行不透明度混合</c>


555
00:22:12,933 --> 00:22:14,368 line:10%
<c.magenta>这两者都将是</c>


556
00:22:14,434 --> 00:22:15,435 line:10%
<c.magenta>非线性的拖动</c>


557
00:22:16,904 --> 00:22:17,838 line:90%,end
<c.magenta>这是代码</c>


558
00:22:17,905 --> 00:22:19,006 line:90%,end
<c.magenta>我还省略了</c>


559
00:22:19,072 --> 00:22:20,507 line:90%,end
<c.magenta>有些重复的步骤</c>


560
00:22:20,574 --> 00:22:22,075 line:90%,end
<c.magenta>那么我们创建了转换动画器</c>


561
00:22:22,142 --> 00:22:24,278 line:90%,end
<c.magenta>我们推动了两个标签的转换</c>


562
00:22:24,411 --> 00:22:27,147 line:90%,end
<c.magenta>即将使用的标签得到了身份转换</c>


563
00:22:27,214 --> 00:22:30,551 line:90%,end
<c.magenta>那是因为它已经被预调整和转换了</c>


564
00:22:30,617 --> 00:22:33,420 line:90%,end
<c.magenta>以匹配即将弃用的标签的边界值</c>


565
00:22:33,987 --> 00:22:37,257 line:90%,end
<c.magenta>并且即将弃用的标签</c>
<c.magenta>以那样的方式进行转换 它匹配</c>


566
00:22:37,324 --> 00:22:38,258 line:90%,end
<c.magenta>即将使用的标签的边界值</c>


567
00:22:38,425 --> 00:22:39,726 line:90%,end
<c.magenta>在被推动之前</c>


568
00:22:40,861 --> 00:22:42,696 line:90%,end
<c.magenta>我们在这里创建了两个属性动画器</c>


569
00:22:42,763 --> 00:22:43,630 line:90%,end
<c.magenta>来混合我们的阿尔法值</c>


570
00:22:43,697 --> 00:22:45,098 line:90%,end
<c.magenta>我们在这里禁用了线性拖动</c>


571
00:22:45,165 --> 00:22:46,533 line:90%,end
<c.magenta>以便它们保持它们的节奏</c>


572
00:22:47,501 --> 00:22:49,136 line:90%,end
<c.magenta>让我们看看那给我们带来了什么</c>


573
00:22:51,572 --> 00:22:53,307 line:90%,end
<c.magenta>那么再一次</c>


574
00:22:53,373 --> 00:22:55,943 line:90%,end
<c.magenta>我们可以非交互式地推动这种转换</c>


575
00:22:57,277 --> 00:22:59,313 line:90%,end
<c.magenta>但我们还可以交互式地推动它</c>


576
00:22:59,379 --> 00:23:00,314 line:90%,end
<c.magenta>看起来很不错</c>


577
00:23:02,683 --> 00:23:03,884 line:90%,end
<c.magenta>我们甚至可以推动它</c>


578
00:23:03,951 --> 00:23:05,018 line:90%,end
<c.magenta>然后再中断它</c>


579
00:23:05,185 --> 00:23:06,453 line:90%,end
<c.magenta>就这样起作用了</c>


580
00:23:08,889 --> 00:23:10,057 line:90%,end
<c.magenta>我认为这很酷…</c>


581
00:23:15,729 --> 00:23:17,431 line:90%,end
<c.magenta>我认为很酷的是</c>


582
00:23:17,564 --> 00:23:20,000 line:90%,end
<c.magenta>我们现在有一个黏着的动画转化</c>


583
00:23:20,067 --> 00:23:23,203 line:90%,end
<c.magenta>是由六个不同的属性动画器驱动的</c>


584
00:23:23,270 --> 00:23:26,073 line:90%,end
<c.magenta>其中五个有自己的定时特性</c>


585
00:23:26,573 --> 00:23:27,574 line:90%,end
<c.magenta>现在我们可以</c>


586
00:23:27,641 --> 00:23:28,976 line:90%,end
<c.magenta>在属性动画器之前实现</c>


587
00:23:29,042 --> 00:23:30,978 line:90%,end
<c.magenta>属性动画器需要大量代码并且也很复杂</c>


588
00:23:31,411 --> 00:23:33,380 line:90%,end
<c.magenta>但现在通过这个基础结构</c>
<c.magenta>我们设置好了</c>


589
00:23:33,547 --> 00:23:34,648 line:90%,end
<c.magenta>我们可使用属性动画器</c>


590
00:23:34,715 --> 00:23:36,116 line:90%,end
<c.magenta>简便地实现这些效果</c>


591
00:23:36,183 --> 00:23:38,218 line:90%,end
<c.magenta>只需要声明我们的定时特性</c>


592
00:23:38,285 --> 00:23:39,286 line:90%,end
<c.magenta>和拖动行为即可</c>


593
00:23:41,622 --> 00:23:43,357 line:90%,end
<c.magenta>那么这就是如何协调动画</c>


594
00:23:44,057 --> 00:23:46,527 line:90%,end
<c.magenta>现在让我们谈一些技巧、秘诀</c>
<c.magenta>以及一些额外技术</c>


595
00:23:46,593 --> 00:23:49,329 line:90%,end
<c.magenta>当你为用户创建动画时可以用得上</c>


596
00:23:50,998 --> 00:23:52,266 line:90%,end
<c.magenta>那么以前是不是有人</c>


597
00:23:52,332 --> 00:23:53,433 line:90%,end
<c.magenta>曾尝试让</c>


598
00:23:53,500 --> 00:23:54,768 line:90%,end
<c.magenta>圆角半径动起来？</c>


599
00:23:55,369 --> 00:23:56,904 line:90%,end
<c.magenta>我想也许你们中有人做过</c>


600
00:23:57,738 --> 00:23:58,839 line:90%,end
<c.magenta>为了实现这个功能</c>


601
00:23:58,906 --> 00:24:00,107 line:90%,end
<c.magenta>你几乎必须得手动设置</c>


602
00:24:00,174 --> 00:24:01,942 line:90%,end
<c.magenta>你的圆角半径或若你想让它动起来</c>


603
00:24:02,009 --> 00:24:03,777 line:90%,end
<c.magenta>你就必须创建一个CA基础动画</c>


604
00:24:03,844 --> 00:24:05,412 line:90%,end
<c.magenta>并将其设置它的来去值</c>


605
00:24:06,613 --> 00:24:07,948 line:90%,end
<c.magenta>我们要做的是</c>


606
00:24:08,182 --> 00:24:09,416 line:90%,end
<c.magenta>让我们的圆角半径动起来</c>


607
00:24:09,483 --> 00:24:11,285 line:90%,end
<c.magenta>那样它会变成交互式</c>


608
00:24:12,252 --> 00:24:13,587 line:90%,end
<c.magenta>那么我们该如何实现呢？</c>


609
00:24:16,123 --> 00:24:17,624 line:90%,end
<c.magenta>现在我很高兴地要告诉你们</c>


610
00:24:17,691 --> 00:24:21,061 line:90%,end
<c.magenta>现在那个圆角半径在UIKit中</c>
<c.magenta>是一个完全可动画属性了</c>


611
00:24:27,935 --> 00:24:28,869 line:10%
<c.magenta>现在因为UIView</c>


612
00:24:28,936 --> 00:24:31,071 line:10%
<c.magenta>没有暴露圆角半径属性</c>


613
00:24:31,205 --> 00:24:33,540 line:10%
<c.magenta>你实际上需要进入视图背层</c>


614
00:24:33,607 --> 00:24:35,075 line:10%
<c.magenta>修改圆角半径</c>


615
00:24:35,175 --> 00:24:37,144 line:10%
<c.magenta>但只要你在一个动画代码块中那样做</c>


616
00:24:37,211 --> 00:24:39,646 line:10%
<c.magenta>我们就会隐含地为你创建那个动画</c>


617
00:24:39,713 --> 00:24:41,648 line:10%
<c.magenta>并且它会是完全可追踪和可拖动的动画</c>


618
00:24:41,915 --> 00:24:43,050 line:10%
<c.magenta>事实上 你甚至可以</c>


619
00:24:43,116 --> 00:24:44,685 line:10%
<c.magenta>从UIView动画方法中实现</c>


620
00:24:45,919 --> 00:24:48,555 line:90%,end
<c.magenta>那会处理我们的交互式圆角半径动画</c>


621
00:24:48,689 --> 00:24:50,424 line:90%,end
<c.magenta>现在这两个家伙怎么办呢</c>


622
00:24:50,824 --> 00:24:51,692 line:90%,end
<c.magenta>我们只想让</c>


623
00:24:51,758 --> 00:24:53,193 line:90%,end
<c.magenta>左上角和右上角动起来</c>


624
00:24:53,260 --> 00:24:54,394 line:90%,end
<c.magenta>我们又该如何实现呢？</c>


625
00:24:55,829 --> 00:24:59,233 line:90%,end
<c.magenta>我也非常高兴地告诉你们说</c>
<c.magenta>我们给CALayer添加了新属性</c>


626
00:24:59,299 --> 00:25:00,400 line:90%,end
<c.magenta>即maskedCorners</c>


627
00:25:05,472 --> 00:25:07,207 line:90%,end
<c.magenta>现在这个属性允许我们有选择地选择</c>


628
00:25:07,274 --> 00:25:09,910 line:90%,end
<c.magenta>要给哪个圆角半径应用遮罩</c>


629
00:25:09,977 --> 00:25:13,046 line:90%,end
<c.magenta>在我们本例中是左上角和右上角</c>


630
00:25:14,915 --> 00:25:15,749 line:90%,end
<c.magenta>现在最终</c>


631
00:25:15,816 --> 00:25:17,117 line:90%,end
<c.magenta>这就是实现代码</c>


632
00:25:17,184 --> 00:25:18,719 line:90%,end
<c.magenta>省略了一些重复步骤</c>


633
00:25:18,785 --> 00:25:20,988 line:90%,end
<c.magenta>那么我们只是</c>
<c.magenta>在这里创建了一个新动画器</c>


634
00:25:21,054 --> 00:25:22,723 line:90%,end
<c.magenta>我们要使用一个线性定时函数</c>


635
00:25:22,789 --> 00:25:25,025 line:90%,end
<c.magenta>并且我们要执行我们的圆角半径动画</c>


636
00:25:25,125 --> 00:25:26,693 line:90%,end
<c.magenta>这就是我们所需要做的全部</c>


637
00:25:27,160 --> 00:25:29,229 line:90%,end
<c.magenta>那让我们实现了如下动画</c>


638
00:25:33,901 --> 00:25:36,370 line:10%
<c.magenta>它很微妙 但我们的确是交互式地拖动</c>


639
00:25:36,436 --> 00:25:38,005 line:10%
<c.magenta>那里的圆角半径 这很酷</c>


640
00:25:42,442 --> 00:25:43,410 line:90%,end
<c.magenta>迄今为止</c>


641
00:25:43,510 --> 00:25:45,779 line:90%,end
<c.magenta>有一个潜在的信息</c>


642
00:25:46,313 --> 00:25:47,915 line:90%,end
<c.magenta>非常重要</c>


643
00:25:47,981 --> 00:25:48,949 line:90%,end
<c.magenta>即你的全部动画</c>


644
00:25:49,016 --> 00:25:50,817 line:90%,end
<c.magenta>要共享同一个延时单位</c>


645
00:25:51,151 --> 00:25:52,986 line:90%,end
<c.magenta>这就使得拖动变得非常简单</c>


646
00:25:53,053 --> 00:25:53,954 line:90%,end
<c.magenta>同时也让</c>


647
00:25:54,021 --> 00:25:55,489 line:90%,end
<c.magenta>一致地拖动它们变得有可能</c>


648
00:25:56,623 --> 00:25:59,092 line:90%,end
<c.magenta>但你知道的 有时候</c>


649
00:25:59,159 --> 00:26:00,994 line:90%,end
<c.magenta>有一个稍早一点完成的动画</c>


650
00:26:01,061 --> 00:26:03,030 line:90%,end
<c.magenta>比一个延迟开始的动画要有好处</c>


651
00:26:03,764 --> 00:26:05,232 line:90%,end
<c.magenta>有一个例子</c>


652
00:26:05,399 --> 00:26:07,568 line:90%,end
<c.magenta>请看如下动画</c>


653
00:26:07,634 --> 00:26:09,770 line:90%,end
<c.magenta>请注意这里的详情按钮</c>


654
00:26:09,837 --> 00:26:11,772 line:90%,end
<c.magenta>它在开启时</c>


655
00:26:12,306 --> 00:26:13,473 line:90%,end
<c.magenta>就已经占据了半个屏幕</c>


656
00:26:13,674 --> 00:26:14,908 line:90%,end
<c.magenta>并且它完全停下来</c>


657
00:26:14,975 --> 00:26:16,577 line:90%,end
<c.magenta>也是围绕同一个点</c>


658
00:26:18,212 --> 00:26:19,346 line:90%,end
<c.magenta>若我们尝试把它变成交互式的</c>


659
00:26:19,413 --> 00:26:20,247 line:90%,end
<c.magenta>你可以看到它是这样的</c>


660
00:26:20,314 --> 00:26:22,816 line:90%,end
<c.magenta>它从这个点开始动画</c>


661
00:26:24,051 --> 00:26:25,719 line:90%,end
<c.magenta>然后动画完成</c>


662
00:26:25,853 --> 00:26:26,954 line:90%,end
<c.magenta>也是围绕那个点</c>


663
00:26:27,754 --> 00:26:29,323 line:90%,end
<c.magenta>如果你看一下UIKit</c>


664
00:26:29,389 --> 00:26:31,892 line:90%,end
<c.magenta>你其实可以看到我们可以</c>
<c.magenta>在很多地方应用这个功能</c>


665
00:26:31,992 --> 00:26:33,794 line:90%,end
<c.magenta>事实上</c>
<c.magenta>UINavigationBar</c>


666
00:26:33,861 --> 00:26:35,896 line:90%,end
<c.magenta>自iOS 7以来已经有了这个效果了</c>


667
00:26:35,963 --> 00:26:38,532 line:90%,end
<c.magenta>当你交互式地驱动那个动画时</c>


668
00:26:40,100 --> 00:26:41,335 line:90%,end
<c.magenta>那么我们可以创建一个</c>


669
00:26:41,401 --> 00:26:42,936 line:90%,end
<c.magenta>时长缩短的动画器</c>


670
00:26:43,003 --> 00:26:44,671 line:90%,end
<c.magenta>或我们能使用这里的这个延迟因子</c>


671
00:26:44,838 --> 00:26:46,006 line:90%,end
<c.magenta>但这实际上会让</c>


672
00:26:46,073 --> 00:26:47,007 line:90%,end
<c.magenta>我们的拖动代码变得更复杂</c>


673
00:26:47,508 --> 00:26:49,476 line:90%,end
<c.magenta>看起来这里有更简洁的方案</c>


674
00:26:49,543 --> 00:26:52,079 line:90%,end
<c.magenta>也就是使用keyframe动画</c>


675
00:26:53,280 --> 00:26:54,515 line:90%,end
<c.magenta>如果我们看一下UIView标头</c>


676
00:26:54,581 --> 00:26:56,583 line:90%,end
<c.magenta>我们可以看到</c>
<c.magenta>以下两个keyframe方法</c>


677
00:26:56,950 --> 00:26:58,118 line:90%,end
<c.magenta>我想让你们注意一下</c>


678
00:26:58,185 --> 00:26:59,486 line:90%,end
<c.magenta>RelativeStartTime</c>


679
00:26:59,553 --> 00:27:00,721 line:90%,end
<c.magenta>和RelativeDuration</c>


680
00:27:01,154 --> 00:27:02,823 line:90%,end
<c.magenta>那么为了创建这种效果</c>


681
00:27:03,457 --> 00:27:04,992 line:90%,end
<c.magenta>我们需要在属性动画器内</c>


682
00:27:05,058 --> 00:27:06,894 line:90%,end
<c.magenta>执行一个keyframe动画</c>


683
00:27:07,327 --> 00:27:09,463 line:90%,end
<c.magenta>所以我们要调用</c>
<c.magenta>UIView.animateKeyframes</c>


684
00:27:09,530 --> 00:27:11,465 line:90%,end
<c.magenta>其相对时长为零</c>


685
00:27:11,765 --> 00:27:13,600 line:90%,end
<c.magenta>这意味着我们的</c>
<c.magenta>keyframe动画</c>


686
00:27:13,667 --> 00:27:16,637 line:90%,end
<c.magenta>将继承其外部属性动画器的时长</c>


687
00:27:17,137 --> 00:27:19,706 line:90%,end
<c.magenta>事实上 如果你像这样嵌入动画</c>


688
00:27:19,773 --> 00:27:21,775 line:90%,end
<c.magenta>你将免费获得这种继承行为</c>


689
00:27:21,842 --> 00:27:22,809 line:90%,end
<c.magenta>那么这非常有帮助</c>


690
00:27:22,876 --> 00:27:24,645 line:90%,end
<c.magenta>如果你不适用属性动画器的话</c>


691
00:27:26,280 --> 00:27:28,148 line:90%,end
<c.magenta>现在当我们扩展我们的评论视图时</c>


692
00:27:28,215 --> 00:27:29,449 line:90%,end
<c.magenta>我们希望动画能晚些开始</c>


693
00:27:29,516 --> 00:27:32,152 line:90%,end
<c.magenta>我们要使用的相对开始时间为0.5</c>


694
00:27:32,352 --> 00:27:35,589 line:90%,end
<c.magenta>并且我们要通过使用</c>
<c.magenta>相对时长为0.5对其进行补偿</c>


695
00:27:35,989 --> 00:27:37,357 line:90%,end
<c.magenta>当我们折叠它时</c>


696
00:27:37,424 --> 00:27:38,959 line:90%,end
<c.magenta>我们要使用的相对开始时间为零</c>


697
00:27:39,026 --> 00:27:40,761 line:90%,end
<c.magenta>因为我们希望它立即开始</c>


698
00:27:40,894 --> 00:27:43,297 line:90%,end
<c.magenta>或我们使用相对时长为0.5</c>


699
00:27:43,463 --> 00:27:45,098 line:90%,end
<c.magenta>以便它可以早一些结束</c>


700
00:27:45,699 --> 00:27:46,700 line:90%,end
<c.magenta>我想让你们注意</c>


701
00:27:46,767 --> 00:27:48,435 line:90%,end
<c.magenta>这里的这两个参数</c>


702
00:27:48,769 --> 00:27:49,703 line:90%,end
<c.magenta>那么你不想使用</c>


703
00:27:49,770 --> 00:27:50,771 line:90%,end
<c.magenta>线性定时函数</c>


704
00:27:50,838 --> 00:27:52,239 line:90%,end
<c.magenta>给你的keyframe动画</c>


705
00:27:52,372 --> 00:27:54,308 line:90%,end
<c.magenta>你可以使用你想要使用的任意定时函数</c>


706
00:27:54,374 --> 00:27:56,944 line:90%,end
<c.magenta>包括你自己的自定义定时函数</c>


707
00:27:57,311 --> 00:27:59,780 line:90%,end
<c.magenta>并且如果你有多个keyframe</c>
<c.magenta>而我们没有</c>


708
00:28:00,080 --> 00:28:01,615 line:90%,end
<c.magenta>你实际上可以插入它们</c>


709
00:28:01,682 --> 00:28:03,217 line:90%,end
<c.magenta>使用选项参数</c>


710
00:28:03,984 --> 00:28:05,686 line:90%,end
<c.magenta>或控制它们的插入方式</c>


711
00:28:05,752 --> 00:28:07,187 line:90%,end
<c.magenta>使用选项参数</c>


712
00:28:10,757 --> 00:28:13,260 line:90%,end
<c.magenta>现在最后 我想稍微谈谈</c>


713
00:28:13,327 --> 00:28:15,028 line:90%,end
<c.magenta>附加动画</c>


714
00:28:16,363 --> 00:28:17,264 line:90%,end
<c.magenta>那么附加动画</c>


715
00:28:17,331 --> 00:28:18,398 line:90%,end
<c.magenta>非常强大</c>


716
00:28:18,732 --> 00:28:20,267 line:90%,end
<c.magenta>我觉得它们很有意思</c>


717
00:28:20,334 --> 00:28:21,468 line:90%,end
<c.magenta>因为它们可以允许我们</c>


718
00:28:21,535 --> 00:28:23,170 line:90%,end
<c.magenta>修改或推动</c>


719
00:28:23,237 --> 00:28:24,872 line:90%,end
<c.magenta>视图的单一属性</c>


720
00:28:25,038 --> 00:28:27,875 line:90%,end
<c.magenta>为多个同时运行的动画</c>


721
00:28:29,309 --> 00:28:30,811 line:90%,end
<c.magenta>现在为了演示</c>


722
00:28:32,579 --> 00:28:33,814 line:90%,end
<c.magenta>它其中的要点</c>


723
00:28:33,881 --> 00:28:35,349 line:90%,end
<c.magenta>我想演示</c>


724
00:28:35,415 --> 00:28:37,351 line:90%,end
<c.magenta>如何更附加地进行思考</c>


725
00:28:37,417 --> 00:28:39,553 line:90%,end
<c.magenta>当我们设计和创建我们的动画时</c>


726
00:28:39,820 --> 00:28:41,088 line:90%,end
<c.magenta>假如我们有一个正方形</c>


727
00:28:41,455 --> 00:28:42,890 line:90%,end
<c.magenta>假设我们想让它动起来</c>


728
00:28:42,956 --> 00:28:44,992 line:90%,end
<c.magenta>10毫秒转360度</c>


729
00:28:45,125 --> 00:28:47,094 line:90%,end
<c.magenta>那个动画看起来可能是这样的</c>


730
00:28:50,497 --> 00:28:51,532 line:90%,end
<c.magenta>现在你可能在想</c>


731
00:28:51,598 --> 00:28:52,766 line:90%,end
<c.magenta>嗯 那就跟</c>


732
00:28:52,833 --> 00:28:55,135 line:90%,end
<c.magenta>推动转换一样简单</c>


733
00:28:55,936 --> 00:28:57,437 line:10%
<c.magenta>你其实是不会出错的</c>


734
00:28:58,405 --> 00:28:59,540 line:10%
<c.magenta>但像这样的代码</c>


735
00:28:59,606 --> 00:29:00,607 line:10%
<c.magenta>推动我们的视图</c>


736
00:29:00,674 --> 00:29:02,209 line:10%
<c.magenta>以20π弧度</c>


737
00:29:02,509 --> 00:29:04,278 line:10%
<c.magenta>并不会生成那种动画</c>


738
00:29:04,912 --> 00:29:07,147 line:10%
<c.magenta>它实际上会生成这种动画</c>


739
00:29:10,117 --> 00:29:10,984 line:10%
<c.magenta>你看到了吧？</c>


740
00:29:13,487 --> 00:29:14,922 line:10%
<c.magenta>它实际上不会动</c>


741
00:29:14,988 --> 00:29:16,990 line:10%
<c.magenta>并且有一个非常好的理由</c>


742
00:29:17,658 --> 00:29:18,959 line:10%
<c.magenta>那是因为</c>
<c.magenta>Core Animation</c>


743
00:29:19,026 --> 00:29:20,727 line:10%
<c.magenta>只关心总位移</c>


744
00:29:20,794 --> 00:29:22,729 line:10%
<c.magenta>当你推动视图的转换时</c>


745
00:29:23,230 --> 00:29:24,231 line:10%
<c.magenta>那么在本例中</c>


746
00:29:24,364 --> 00:29:25,699 line:10%
<c.magenta>目标旋转值</c>


747
00:29:25,766 --> 00:29:27,067 line:10%
<c.magenta>为20π弧度</c>


748
00:29:27,134 --> 00:29:28,368 line:10%
<c.magenta>与当前旋转值的</c>


749
00:29:28,435 --> 00:29:30,504 line:10%
<c.magenta>方向相同</c>


750
00:29:30,871 --> 00:29:32,039 line:10%
<c.magenta>那么总位移</c>


751
00:29:32,105 --> 00:29:33,106 line:10%
<c.magenta>实际上是零</c>


752
00:29:34,508 --> 00:29:35,342 line:10%
<c.magenta>现在Core Animation</c>


753
00:29:35,409 --> 00:29:37,411 line:10%
<c.magenta>将为你创建一个动画</c>


754
00:29:37,477 --> 00:29:38,545 line:10%
<c.magenta>但它的来去值</c>


755
00:29:38,612 --> 00:29:39,947 line:10%
<c.magenta>是一样的</c>


756
00:29:41,048 --> 00:29:42,783 line:10%
<c.magenta>你知道的 类似的问题存在于</c>


757
00:29:42,950 --> 00:29:43,917 line:10%
<c.magenta>如果你尝试以180度逆时针方向</c>


758
00:29:43,984 --> 00:29:46,186 line:10%
<c.magenta>旋转视图</c>


759
00:29:46,253 --> 00:29:48,422 line:10%
<c.magenta>通过指定负π弧度</c>


760
00:29:49,056 --> 00:29:51,291 line:10%
<c.magenta>那是因为</c>
<c.magenta>Core Animation</c>


761
00:29:51,391 --> 00:29:53,427 line:10%
<c.magenta>因为它只关心总位移</c>


762
00:29:53,794 --> 00:29:55,295 line:10%
<c.magenta>并寻找最短路径</c>


763
00:29:55,362 --> 00:29:56,196 line:10%
<c.magenta>当不明确时</c>


764
00:29:56,263 --> 00:29:58,665 line:10%
<c.magenta>也就是这里的情况</c>
<c.magenta>将会变为顺时针方向</c>


765
00:30:00,567 --> 00:30:01,869 line:90%,end
<c.magenta>那么我们要如何实现呢？</c>


766
00:30:02,102 --> 00:30:03,604 line:90%,end
<c.magenta>我们可以使用一个核心动画</c>


767
00:30:03,670 --> 00:30:05,706 line:90%,end
<c.magenta>并创建我们自己的CA基础动画</c>


768
00:30:05,806 --> 00:30:07,341 line:90%,end
<c.magenta>然后手动设置我们的来去值</c>


769
00:30:07,407 --> 00:30:09,076 line:90%,end
<c.magenta>这样就完美了 没问题了</c>


770
00:30:09,443 --> 00:30:12,379 line:90%,end
<c.magenta>但我们不会获取追踪和拖动行为</c>


771
00:30:12,446 --> 00:30:13,780 line:90%,end
<c.magenta>从属性动画器中</c>


772
00:30:14,314 --> 00:30:15,949 line:90%,end
<c.magenta>并且它还会让这个例子</c>


773
00:30:16,016 --> 00:30:17,150 line:90%,end
<c.magenta>变得没那么有意思</c>


774
00:30:18,352 --> 00:30:19,686 line:90%,end
<c.magenta>我们可以做的是</c>


775
00:30:19,786 --> 00:30:21,221 line:90%,end
<c.magenta>我们可以把它分解为</c>


776
00:30:21,288 --> 00:30:24,658 line:90%,end
<c.magenta>一系列的小附加旋转动画</c>


777
00:30:24,725 --> 00:30:25,792 line:90%,end
<c.magenta>并同时推动它们</c>


778
00:30:25,859 --> 00:30:27,361 line:90%,end
<c.magenta>创建我们想要的效果</c>


779
00:30:28,362 --> 00:30:31,765 line:90%,end
<c.magenta>那么看起来转换是一个</c>
<c.magenta>附加可动画属性</c>


780
00:30:32,032 --> 00:30:33,166 line:90%,end
<c.magenta>只要它仿射</c>


781
00:30:33,267 --> 00:30:35,869 line:90%,end
<c.magenta>与帧、边界、中心和位置一起</c>


782
00:30:37,604 --> 00:30:38,972 line:90%,end
<c.magenta>那么在我们的方案中</c>


783
00:30:39,339 --> 00:30:40,307 line:90%,end
<c.magenta>我们实际上要创建</c>


784
00:30:40,374 --> 00:30:43,143 line:90%,end
<c.magenta>总共20个动画</c>


785
00:30:43,443 --> 00:30:44,945 line:90%,end
<c.magenta>并且每个动画将推动</c>


786
00:30:45,012 --> 00:30:46,413 line:90%,end
<c.magenta>180度</c>


787
00:30:46,480 --> 00:30:49,149 line:90%,end
<c.magenta>然后它们会共同</c>


788
00:30:49,216 --> 00:30:50,484 line:90%,end
<c.magenta>生成这个动画</c>


789
00:30:51,885 --> 00:30:52,819 line:90%,end
<c.magenta>现在很酷的是</c>


790
00:30:52,886 --> 00:30:55,055 line:90%,end
<c.magenta>我们实际上有20个动画</c>


791
00:30:55,189 --> 00:30:56,924 line:90%,end
<c.magenta>同时在这里运行</c>


792
00:30:57,658 --> 00:31:00,360 line:90%,end
<c.magenta>我其实不建议说这是个很好的主意</c>


793
00:31:01,862 --> 00:31:03,564 line:90%,end
<c.magenta>但它的确帮助我们</c>


794
00:31:03,630 --> 00:31:05,465 line:90%,end
<c.magenta>更附加地思考更多东西</c>


795
00:31:05,566 --> 00:31:07,734 line:90%,end
<c.magenta>当我们设计、编写</c>


796
00:31:07,801 --> 00:31:09,002 line:90%,end
<c.magenta>和创建我们的动画时</c>


797
00:31:09,102 --> 00:31:10,137 line:90%,end
<c.magenta>那么重点是</c>


798
00:31:10,204 --> 00:31:11,238 line:90%,end
<c.magenta>要考虑</c>


799
00:31:11,305 --> 00:31:13,707 line:90%,end
<c.magenta>如何把许多动画连在一起</c>


800
00:31:13,774 --> 00:31:15,209 line:90%,end
<c.magenta>或编写到一起</c>


801
00:31:15,275 --> 00:31:17,244 line:90%,end
<c.magenta>来创建有意思的转换</c>


802
00:31:19,947 --> 00:31:20,848 line:90%,end
<c.magenta>那么今天我们了解了</c>


803
00:31:20,914 --> 00:31:22,049 line:90%,end
<c.magenta>如何制造</c>


804
00:31:22,115 --> 00:31:23,550 line:90%,end
<c.magenta>完全交互和可中断的动画</c>


805
00:31:23,617 --> 00:31:25,185 line:90%,end
<c.magenta>使用一些现代技巧</c>


806
00:31:25,686 --> 00:31:27,187 line:90%,end
<c.magenta>我们还谈了如何协调</c>


807
00:31:27,254 --> 00:31:28,589 line:90%,end
<c.magenta>一系列的动画</c>


808
00:31:28,655 --> 00:31:29,823 line:90%,end
<c.magenta>每个动画都有唯一的</c>


809
00:31:29,923 --> 00:31:31,091 line:90%,end
<c.magenta>定时函数</c>


810
00:31:31,458 --> 00:31:33,160 line:90%,end
<c.magenta>我们还看了一些技巧</c>


811
00:31:33,227 --> 00:31:34,528 line:90%,end
<c.magenta>以帮助我们</c>


812
00:31:34,595 --> 00:31:35,863 line:90%,end
<c.magenta>为我们的用户</c>


813
00:31:35,929 --> 00:31:36,897 line:90%,end
<c.magenta>创建一些很棒的动画</c>


814
00:31:37,264 --> 00:31:40,234 line:90%,end
<c.magenta>我希望你们从这场演讲回去之后</c>


815
00:31:40,434 --> 00:31:41,969 line:90%,end
<c.magenta>就开始考虑</c>


816
00:31:42,035 --> 00:31:43,103 line:90%,end
<c.magenta>让你的动画转化</c>


817
00:31:43,170 --> 00:31:44,872 line:90%,end
<c.magenta>变得完全交互和可中断</c>


818
00:31:46,406 --> 00:31:47,908 line:90%,end
<c.magenta>那么我们有一些相关演讲</c>


819
00:31:47,975 --> 00:31:49,243 line:90%,end
<c.magenta>如果你错过了其中一场</c>


820
00:31:49,309 --> 00:31:51,044 line:90%,end
<c.magenta>我鼓励你在线观看它们</c>


821
00:31:51,578 --> 00:31:53,614 line:90%,end
<c.magenta>还有前几年的一些</c>


822
00:31:53,680 --> 00:31:54,982 line:90%,end
<c.magenta>有意思的演讲</c>


823
00:31:55,048 --> 00:31:56,583 line:90%,end
<c.magenta>那么如果你对动画有兴趣</c>


824
00:31:56,650 --> 00:31:57,551 line:90%,end
<c.magenta>我强烈建议你</c>


825
00:31:57,618 --> 00:31:58,552 line:90%,end
<c.magenta>查看这些演讲的相关资料</c>


826
00:31:58,819 --> 00:32:02,222 line:90%,end
<c.magenta>尤其是去年的这场演讲 我们介绍了</c>
<c.magenta>UIViewPropertyAnimator</c>


827
00:32:02,756 --> 00:32:03,757 line:90%,end
<c.magenta>要获取更多信息</c>


828
00:32:03,824 --> 00:32:05,826 line:90%,end
<c.magenta>请访问以下URL</c>


829
00:32:06,126 --> 00:32:07,928 line:90%,end
<c.magenta>非常感谢</c>

